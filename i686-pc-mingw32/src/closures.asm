; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	g:\php-sdk\lib_builds\vc9\x86\libffi-3.0.11\src\closures.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

EXTRN	__imp__VirtualAlloc@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT _win32mmap
_TEXT	SEGMENT
_win32mmap PROC						; COMDAT
; _size$ = eax
; File g:\php-sdk\lib_builds\vc9\x86\libffi-3.0.11\src\dlmalloc.c
; Line 1365
	push	64					; 00000040H
	push	12288					; 00003000H
	push	eax
	push	0
	call	DWORD PTR __imp__VirtualAlloc@16
; Line 1366
	test	eax, eax
	jne	SHORT $LN4@win32mmap
	or	eax, -1
$LN4@win32mmap:
; Line 1367
	ret	0
_win32mmap ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _win32direct_mmap
_TEXT	SEGMENT
_win32direct_mmap PROC					; COMDAT
; _size$ = eax
; Line 1372
	push	64					; 00000040H
	push	1060864					; 00103000H
	push	eax
	push	0
	call	DWORD PTR __imp__VirtualAlloc@16
; Line 1373
	test	eax, eax
	jne	SHORT $LN4@win32direc
	or	eax, -1
$LN4@win32direc:
; Line 1374
	ret	0
_win32direct_mmap ENDP
_TEXT	ENDS
EXTRN	__imp__VirtualFree@12:PROC
EXTRN	__imp__VirtualQuery@12:PROC
; Function compile flags: /Ogtpy
;	COMDAT _win32munmap
_TEXT	SEGMENT
_minfo$ = -28						; size = 28
_win32munmap PROC					; COMDAT
; _ptr$ = ecx
; _size$ = eax
; Line 1377
	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, eax
; Line 1379
	mov	esi, ecx
; Line 1380
	test	edi, edi
	je	SHORT $LN5@win32munma
	mov	ebp, DWORD PTR __imp__VirtualQuery@12
	mov	ebx, DWORD PTR __imp__VirtualFree@12
	npad	5
$LL6@win32munma:
; Line 1381
	push	28					; 0000001cH
	lea	eax, DWORD PTR _minfo$[esp+48]
	push	eax
	push	esi
	call	ebp
	test	eax, eax
	je	SHORT $LN10@win32munma
; Line 1384
	cmp	DWORD PTR _minfo$[esp+44], esi
	jne	SHORT $LN10@win32munma
	cmp	DWORD PTR _minfo$[esp+48], esi
	jne	SHORT $LN10@win32munma
	cmp	DWORD PTR _minfo$[esp+60], 4096		; 00001000H
	jne	SHORT $LN10@win32munma
	cmp	DWORD PTR _minfo$[esp+56], edi
	ja	SHORT $LN10@win32munma
; Line 1386
	push	32768					; 00008000H
	push	0
	push	esi
	call	ebx
	test	eax, eax
	je	SHORT $LN10@win32munma
; Line 1388
	mov	eax, DWORD PTR _minfo$[esp+56]
	add	esi, eax
; Line 1389
	sub	edi, eax
	jne	SHORT $LL6@win32munma
$LN5@win32munma:
	pop	edi
	pop	esi
	pop	ebp
; Line 1391
	xor	eax, eax
	pop	ebx
; Line 1392
	add	esp, 28					; 0000001cH
	ret	0
$LN10@win32munma:
	pop	edi
	pop	esi
	pop	ebp
; Line 1382
	or	eax, -1
	pop	ebx
; Line 1392
	add	esp, 28					; 0000001cH
	ret	0
_win32munmap ENDP
_TEXT	ENDS
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__InterlockedCompareExchange@12:PROC
; Function compile flags: /Ogtpy
;	COMDAT _win32_acquire_lock
_TEXT	SEGMENT
_win32_acquire_lock PROC				; COMDAT
; _sl$ = esi
; Line 1468
	push	edi
; Line 1471
	mov	edi, DWORD PTR __imp__InterlockedCompareExchange@12
	push	0
	push	1
	push	esi
	call	edi
	test	eax, eax
	je	SHORT $LN10@win32_acqu
	push	ebx
	mov	ebx, DWORD PTR __imp__Sleep@4
	npad	7
$LL3@win32_acqu:
; Line 1477
	push	0
	call	ebx
	push	0
	push	1
	push	esi
	call	edi
	test	eax, eax
	jne	SHORT $LL3@win32_acqu
	pop	ebx
$LN10@win32_acqu:
; Line 1472
	xor	eax, eax
	pop	edi
; Line 1479
	ret	0
_win32_acquire_lock ENDP
_TEXT	ENDS
EXTRN	__imp__InterlockedExchange@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _win32_release_lock
_TEXT	SEGMENT
_win32_release_lock PROC				; COMDAT
; _sl$ = eax
; Line 1482
	push	0
	push	eax
	call	DWORD PTR __imp__InterlockedExchange@8
; Line 1483
	ret	0
_win32_release_lock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _segment_holding
_TEXT	SEGMENT
_segment_holding PROC					; COMDAT
; _m$ = eax
; _addr$ = edx
; Line 2156
	add	eax, 444				; 000001bcH
	push	esi
$LL4@segment_ho:
; Line 2158
	mov	ecx, DWORD PTR [eax]
	cmp	edx, ecx
	jb	SHORT $LN2@segment_ho
	mov	esi, DWORD PTR [eax+4]
	add	esi, ecx
	cmp	edx, esi
	jb	SHORT $LN3@segment_ho
$LN2@segment_ho:
; Line 2160
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	jne	SHORT $LL4@segment_ho
$LN3@segment_ho:
	pop	esi
; Line 2163
	ret	0
_segment_holding ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _has_segment_link
_TEXT	SEGMENT
_has_segment_link PROC					; COMDAT
; _m$ = eax
; _ss$ = edx
; Line 2166
	mov	ecx, DWORD PTR [edx]
; Line 2167
	add	eax, 444				; 000001bcH
	push	esi
$LL4@has_segmen:
; Line 2169
	cmp	eax, ecx
	jb	SHORT $LN2@has_segmen
	mov	esi, DWORD PTR [edx+4]
	add	esi, ecx
	cmp	eax, esi
	jb	SHORT $LN9@has_segmen
$LN2@has_segmen:
; Line 2171
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	jne	SHORT $LL4@has_segmen
	pop	esi
; Line 2174
	ret	0
$LN9@has_segmen:
; Line 2170
	mov	eax, 1
	pop	esi
; Line 2174
	ret	0
_has_segment_link ENDP
_TEXT	ENDS
EXTRN	__imp__abort:PROC
EXTRN	__imp__GetSystemInfo@4:PROC
_BSS	SEGMENT
__gm_	DB	01ccH DUP (?)
_magic_init_mutex DD 01H DUP (?)
_mparams DB	018H DUP (?)
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _init_mparams
_TEXT	SEGMENT
_system_info$31550 = -36				; size = 36
_init_mparams PROC					; COMDAT
; Line 2509
	sub	esp, 36					; 00000024H
; Line 2510
	cmp	DWORD PTR _mparams+4, 0
	jne	$LN10@init_mpara
	push	esi
; Line 2543
	mov	esi, OFFSET _magic_init_mutex
	mov	DWORD PTR _mparams+12, -1
	mov	DWORD PTR _mparams+16, 2097152		; 00200000H
	mov	DWORD PTR _mparams+20, 7
	call	_win32_acquire_lock
; Line 2544
	cmp	DWORD PTR _mparams, 0
	pop	esi
	jne	SHORT $LN3@init_mpara
; Line 2548
	mov	eax, DWORD PTR _mparams+20
	mov	DWORD PTR _mparams, 1482184792		; 58585858H
	mov	DWORD PTR __gm_+440, 0
	mov	DWORD PTR __gm_+436, eax
$LN3@init_mpara:
; Line 2550
	push	0
	push	OFFSET _magic_init_mutex
	call	DWORD PTR __imp__InterlockedExchange@8
; Line 2564
	lea	ecx, DWORD PTR _system_info$31550[esp+36]
	push	ecx
	call	DWORD PTR __imp__GetSystemInfo@4
; Line 2566
	mov	eax, DWORD PTR _system_info$31550[esp+64]
	mov	ecx, DWORD PTR _system_info$31550[esp+40]
; Line 2583
	lea	edx, DWORD PTR [eax-1]
	mov	DWORD PTR _mparams+4, ecx
	mov	DWORD PTR _mparams+8, eax
	test	edx, eax
	jne	SHORT $LN1@init_mpara
	lea	eax, DWORD PTR [ecx-1]
	test	eax, ecx
	je	SHORT $LN10@init_mpara
$LN1@init_mpara:
; Line 2584
	call	DWORD PTR __imp__abort
$LN10@init_mpara:
; Line 2586
	xor	eax, eax
; Line 2587
	add	esp, 36					; 00000024H
	ret	0
_init_mparams ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _mmap_alloc
_TEXT	SEGMENT
_mmap_alloc PROC					; COMDAT
; _m$ = ebx
; _nb$ = eax
; Line 3216
	mov	ecx, DWORD PTR _mparams+8
	push	edi
	lea	edi, DWORD PTR [ecx+eax+31]
	dec	ecx
	not	ecx
	and	edi, ecx
; Line 3217
	cmp	edi, eax
	jbe	SHORT $LN3@mmap_alloc
; Line 3218
	push	64					; 00000040H
	push	1060864					; 00103000H
	push	edi
	push	0
	call	DWORD PTR __imp__VirtualAlloc@16
	test	eax, eax
; Line 3219
	je	SHORT $LN3@mmap_alloc
	cmp	eax, -1
	je	SHORT $LN3@mmap_alloc
; Line 3220
	mov	edx, eax
	and	edx, 7
	je	SHORT $LN8@mmap_alloc
$LN7@mmap_alloc:
	neg	edx
	and	edx, 7
$LN8@mmap_alloc:
; Line 3221
	mov	ecx, edi
	sub	ecx, edx
	push	esi
; Line 3222
	lea	esi, DWORD PTR [eax+edx]
; Line 3223
	or	edx, 1
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR [esi], edx
; Line 3224
	mov	edx, ecx
	or	edx, 2
	mov	DWORD PTR [esi+4], edx
; Line 3226
	mov	DWORD PTR [esi+ecx+4], 7
; Line 3227
	mov	DWORD PTR [esi+ecx+8], 0
; Line 3229
	cmp	eax, DWORD PTR [ebx+16]
	jae	SHORT $LN2@mmap_alloc
; Line 3230
	mov	DWORD PTR [ebx+16], eax
$LN2@mmap_alloc:
; Line 3231
	add	DWORD PTR [ebx+428], edi
	mov	eax, DWORD PTR [ebx+428]
	cmp	eax, DWORD PTR [ebx+432]
	jbe	SHORT $LN1@mmap_alloc
; Line 3232
	mov	DWORD PTR [ebx+432], eax
$LN1@mmap_alloc:
; Line 3235
	lea	eax, DWORD PTR [esi+8]
	pop	esi
	pop	edi
; Line 3239
	ret	0
$LN3@mmap_alloc:
; Line 3238
	xor	eax, eax
	pop	edi
; Line 3239
	ret	0
_mmap_alloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _init_top
_TEXT	SEGMENT
_init_top PROC						; COMDAT
; _m$ = esi
; _p$ = ecx
; _psize$ = edx
; Line 3281
	mov	eax, ecx
	and	eax, 7
	je	SHORT $LN4@init_top
$LN3@init_top:
	neg	eax
	and	eax, 7
$LN4@init_top:
; Line 3282
	add	ecx, eax
; Line 3283
	sub	edx, eax
; Line 3287
	mov	eax, edx
	mov	DWORD PTR [esi+24], ecx
	mov	DWORD PTR [esi+12], edx
	or	eax, 1
	mov	DWORD PTR [ecx+4], eax
; Line 3289
	mov	DWORD PTR [ecx+edx+4], 40		; 00000028H
; Line 3290
	mov	ecx, DWORD PTR _mparams+16
	mov	DWORD PTR [esi+28], ecx
; Line 3291
	ret	0
_init_top ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _init_bins
_TEXT	SEGMENT
_init_bins PROC						; COMDAT
; _m$ = eax
; Line 3297
	add	eax, 36					; 00000024H
	mov	ecx, 32					; 00000020H
	npad	8
$LL3@init_bins:
; Line 3299
	mov	DWORD PTR [eax+12], eax
	mov	DWORD PTR [eax+8], eax
	add	eax, 8
	sub	ecx, 1
	jne	SHORT $LL3@init_bins
; Line 3301
	ret	0
_init_bins ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _prepend_alloc
_TEXT	SEGMENT
_XP$31925 = -12						; size = 4
_nsize$31902 = -8					; size = 4
_p$ = -4						; size = 4
_qsize$ = 8						; size = 4
_m$ = 8							; size = 4
_prepend_alloc PROC					; COMDAT
; _newbase$ = edx
; _oldbase$ = ecx
; _nb$ = eax
; Line 3324
	sub	esp, 12					; 0000000cH
	push	ebx
	mov	ebx, DWORD PTR _m$[esp+12]
	push	ebp
	push	esi
	mov	esi, ecx
; Line 3325
	mov	ecx, edx
	and	ecx, 7
	push	edi
	je	SHORT $LN67@prepend_al
$LN66@prepend_al:
	neg	ecx
	and	ecx, 7
$LN67@prepend_al:
	lea	edi, DWORD PTR [ecx+edx]
; Line 3326
	mov	ecx, esi
	and	ecx, 7
	mov	DWORD PTR _p$[esp+28], edi
	je	SHORT $LN69@prepend_al
$LN68@prepend_al:
	neg	ecx
	and	ecx, 7
$LN69@prepend_al:
	add	esi, ecx
; Line 3329
	mov	edx, esi
	sub	edx, edi
	sub	edx, eax
	lea	ebp, DWORD PTR [edi+eax]
; Line 3330
	or	eax, 3
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR _qsize$[esp+24], edx
; Line 3337
	cmp	esi, DWORD PTR [ebx+24]
	jne	SHORT $LN63@prepend_al
; Line 3338
	add	DWORD PTR [ebx+12], edx
	mov	eax, DWORD PTR [ebx+12]
	pop	edi
; Line 3340
	or	eax, 1
	mov	DWORD PTR [ebx+24], ebp
	mov	DWORD PTR [ebp+4], eax
; Line 3361
	mov	eax, DWORD PTR _p$[esp+24]
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3362
	add	esp, 12					; 0000000cH
	ret	0
$LN63@prepend_al:
; Line 3343
	cmp	esi, DWORD PTR [ebx+20]
	jne	SHORT $LN61@prepend_al
; Line 3344
	add	DWORD PTR [ebx+8], edx
	mov	eax, DWORD PTR [ebx+8]
; Line 3346
	mov	ecx, eax
	mov	DWORD PTR [ebx+20], ebp
	pop	edi
	or	ecx, 1
	mov	DWORD PTR [ebp+4], ecx
	mov	DWORD PTR [eax+ebp], eax
; Line 3361
	mov	eax, DWORD PTR _p$[esp+24]
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3362
	add	esp, 12					; 0000000cH
	ret	0
$LN61@prepend_al:
; Line 3349
	mov	eax, DWORD PTR [esi+4]
	test	al, 2
	jne	$LN82@prepend_al
; Line 3351
	mov	edi, DWORD PTR [esi+12]
	and	eax, -4					; fffffffcH
	mov	ecx, eax
	shr	ecx, 3
	mov	DWORD PTR _nsize$31902[esp+28], eax
	cmp	ecx, 32					; 00000020H
	jae	SHORT $LN58@prepend_al
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, edi
	jne	SHORT $LN57@prepend_al
	mov	eax, 1
	shl	eax, cl
	not	eax
	and	DWORD PTR [ebx], eax
	jmp	$LN83@prepend_al
$LN57@prepend_al:
	lea	ecx, DWORD PTR [ebx+ecx*8+36]
	cmp	eax, ecx
	je	SHORT $LN54@prepend_al
	cmp	eax, DWORD PTR [ebx+16]
	jb	$LN30@prepend_al
$LN54@prepend_al:
	cmp	edi, ecx
	je	SHORT $LN53@prepend_al
	cmp	edi, DWORD PTR [ebx+16]
	jb	$LN30@prepend_al
$LN53@prepend_al:
	mov	DWORD PTR [eax+12], edi
	mov	DWORD PTR [edi+8], eax
	jmp	$LN83@prepend_al
$LN58@prepend_al:
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR _XP$31925[esp+28], eax
	cmp	edi, esi
	je	SHORT $LN50@prepend_al
	mov	ecx, DWORD PTR [esi+8]
	cmp	ecx, DWORD PTR [ebx+16]
	jb	SHORT $LN41@prepend_al
	mov	DWORD PTR [ecx+12], edi
	mov	DWORD PTR [edi+8], ecx
	jmp	SHORT $LN40@prepend_al
$LN50@prepend_al:
	mov	edi, DWORD PTR [esi+20]
	lea	ecx, DWORD PTR [esi+20]
	test	edi, edi
	jne	SHORT $LL44@prepend_al
	mov	edi, DWORD PTR [esi+16]
	lea	ecx, DWORD PTR [esi+16]
	test	edi, edi
	je	SHORT $LN40@prepend_al
	npad	6
$LL44@prepend_al:
	cmp	DWORD PTR [edi+20], 0
	lea	eax, DWORD PTR [edi+20]
	jne	SHORT $LN42@prepend_al
	cmp	DWORD PTR [edi+16], 0
	lea	eax, DWORD PTR [edi+16]
	je	SHORT $LN43@prepend_al
$LN42@prepend_al:
	mov	edi, DWORD PTR [eax]
	mov	ecx, eax
	jmp	SHORT $LL44@prepend_al
$LN43@prepend_al:
	cmp	ecx, DWORD PTR [ebx+16]
	jb	SHORT $LN41@prepend_al
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN87@prepend_al
$LN41@prepend_al:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _qsize$[esp+24]
$LN87@prepend_al:
	mov	eax, DWORD PTR _XP$31925[esp+28]
$LN40@prepend_al:
	test	eax, eax
	je	$LN83@prepend_al
	mov	ecx, DWORD PTR [esi+28]
	cmp	esi, DWORD PTR [ebx+ecx*4+300]
	lea	ecx, DWORD PTR [ebx+ecx*4+300]
	jne	SHORT $LN38@prepend_al
	mov	DWORD PTR [ecx], edi
	test	edi, edi
	jne	SHORT $LN74@prepend_al
	mov	ecx, DWORD PTR [esi+28]
	mov	eax, 1
	shl	eax, cl
	not	eax
	and	DWORD PTR [ebx+4], eax
	jmp	SHORT $LN83@prepend_al
$LN38@prepend_al:
	cmp	eax, DWORD PTR [ebx+16]
	jb	SHORT $LN35@prepend_al
	cmp	DWORD PTR [eax+16], esi
	jne	SHORT $LN34@prepend_al
	mov	DWORD PTR [eax+16], edi
	jmp	SHORT $LN32@prepend_al
$LN34@prepend_al:
	mov	DWORD PTR [eax+20], edi
	jmp	SHORT $LN32@prepend_al
$LN35@prepend_al:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _qsize$[esp+24]
	mov	eax, DWORD PTR _XP$31925[esp+28]
$LN32@prepend_al:
	test	edi, edi
	je	SHORT $LN83@prepend_al
$LN74@prepend_al:
	cmp	edi, DWORD PTR [ebx+16]
	jb	SHORT $LN30@prepend_al
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN27@prepend_al
	cmp	eax, DWORD PTR [ebx+16]
	jb	SHORT $LN28@prepend_al
	mov	DWORD PTR [edi+16], eax
	mov	DWORD PTR [eax+24], edi
	jmp	SHORT $LN27@prepend_al
$LN28@prepend_al:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _qsize$[esp+24]
$LN27@prepend_al:
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN83@prepend_al
	cmp	eax, DWORD PTR [ebx+16]
	jb	SHORT $LN30@prepend_al
	mov	DWORD PTR [edi+20], eax
	mov	DWORD PTR [eax+24], edi
	jmp	SHORT $LN83@prepend_al
$LN30@prepend_al:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _qsize$[esp+24]
$LN83@prepend_al:
; Line 3352
	mov	eax, DWORD PTR _nsize$31902[esp+28]
	add	esi, eax
; Line 3353
	add	edx, eax
	mov	DWORD PTR _qsize$[esp+24], edx
$LN82@prepend_al:
; Line 3355
	and	DWORD PTR [esi+4], -2			; fffffffeH
	mov	ecx, edx
	or	ecx, 1
	mov	DWORD PTR [ebp+4], ecx
; Line 3356
	mov	ecx, edx
	shr	ecx, 3
	mov	DWORD PTR [edx+ebp], edx
	cmp	ecx, 32					; 00000020H
	jae	SHORT $LN22@prepend_al
	mov	eax, 1
	shl	eax, cl
	lea	esi, DWORD PTR [ebx+ecx*8+36]
	mov	ecx, DWORD PTR [ebx]
	mov	edi, esi
	test	eax, ecx
	jne	SHORT $LN21@prepend_al
	or	eax, ecx
	mov	DWORD PTR [ebx], eax
; Line 3361
	mov	eax, DWORD PTR _p$[esp+28]
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [ebp+8], edi
	pop	edi
	mov	DWORD PTR [ebp+12], esi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3362
	add	esp, 12					; 0000000cH
	ret	0
$LN21@prepend_al:
; Line 3356
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, DWORD PTR [ebx+16]
	jb	SHORT $LN19@prepend_al
	mov	edi, eax
; Line 3361
	mov	eax, DWORD PTR _p$[esp+28]
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [ebp+8], edi
	pop	edi
	mov	DWORD PTR [ebp+12], esi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3362
	add	esp, 12					; 0000000cH
	ret	0
$LN19@prepend_al:
; Line 3356
	call	DWORD PTR __imp__abort
; Line 3361
	mov	eax, DWORD PTR _p$[esp+28]
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [ebp+8], edi
	pop	edi
	mov	DWORD PTR [ebp+12], esi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3362
	add	esp, 12					; 0000000cH
	ret	0
$LN22@prepend_al:
; Line 3356
	mov	eax, edx
	shr	eax, 8
	test	eax, eax
	jne	SHORT $LN16@prepend_al
	xor	ecx, ecx
	jmp	SHORT $LN13@prepend_al
$LN16@prepend_al:
	cmp	eax, 65535				; 0000ffffH
	jbe	SHORT $LN14@prepend_al
	mov	ecx, 31					; 0000001fH
	jmp	SHORT $LN13@prepend_al
$LN14@prepend_al:
	lea	edx, DWORD PTR [eax-256]
	shr	edx, 16					; 00000010H
	and	edx, 8
	mov	ecx, edx
	shl	eax, cl
	lea	ecx, DWORD PTR [eax-4096]
	shr	ecx, 16					; 00000010H
	and	ecx, 4
	shl	eax, cl
	add	edx, ecx
	lea	ecx, DWORD PTR [eax-16384]
	shr	ecx, 16					; 00000010H
	and	ecx, 2
	shl	eax, cl
	shr	eax, 15					; 0000000fH
	sub	eax, ecx
	sub	eax, edx
	mov	edx, DWORD PTR _qsize$[esp+24]
	add	eax, 14					; 0000000eH
	lea	ecx, DWORD PTR [eax+7]
	shr	edx, cl
	and	edx, 1
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	edx, DWORD PTR _qsize$[esp+24]
$LN13@prepend_al:
	xor	eax, eax
	mov	DWORD PTR [ebp+20], eax
	mov	DWORD PTR [ebp+16], eax
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR [ebp+28], ecx
	mov	edi, DWORD PTR [ebx+4]
	lea	esi, DWORD PTR [ebx+ecx*4+300]
	test	eax, edi
	jne	SHORT $LN12@prepend_al
	or	eax, edi
	mov	DWORD PTR [ebx+4], eax
; Line 3361
	mov	eax, DWORD PTR _p$[esp+28]
	mov	DWORD PTR [esi], ebp
	pop	edi
	mov	DWORD PTR [ebp+24], esi
	pop	esi
	mov	DWORD PTR [ebp+12], ebp
	mov	DWORD PTR [ebp+8], ebp
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3362
	add	esp, 12					; 0000000cH
	ret	0
$LN12@prepend_al:
; Line 3356
	mov	eax, DWORD PTR [esi]
	cmp	ecx, 31					; 0000001fH
	jne	SHORT $LN70@prepend_al
	xor	edi, edi
	jmp	SHORT $LN71@prepend_al
$LN70@prepend_al:
	shr	ecx, 1
	mov	edi, 25					; 00000019H
	sub	edi, ecx
$LN71@prepend_al:
	mov	ecx, edi
	mov	esi, edx
	shl	esi, cl
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -4					; fffffffcH
	cmp	ecx, edx
	je	SHORT $LN8@prepend_al
$LL10@prepend_al:
	mov	ecx, esi
	shr	ecx, 31					; 0000001fH
	lea	edi, DWORD PTR [eax+ecx*4+16]
	mov	ecx, DWORD PTR [edi]
	add	esi, esi
	test	ecx, ecx
	je	SHORT $LN7@prepend_al
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -4					; fffffffcH
	cmp	ecx, edx
	jne	SHORT $LL10@prepend_al
$LN8@prepend_al:
	mov	ebx, DWORD PTR [ebx+16]
	mov	ecx, DWORD PTR [eax+8]
	cmp	eax, ebx
	jb	SHORT $LN2@prepend_al
	cmp	ecx, ebx
	jb	SHORT $LN2@prepend_al
	mov	DWORD PTR [ecx+12], ebp
	mov	DWORD PTR [eax+8], ebp
	pop	edi
	mov	DWORD PTR [ebp+12], eax
; Line 3361
	mov	eax, DWORD PTR _p$[esp+24]
	pop	esi
	mov	DWORD PTR [ebp+8], ecx
	mov	DWORD PTR [ebp+24], 0
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3362
	add	esp, 12					; 0000000cH
	ret	0
$LN7@prepend_al:
; Line 3356
	cmp	edi, DWORD PTR [ebx+16]
	jb	SHORT $LN2@prepend_al
	mov	DWORD PTR [edi], ebp
	pop	edi
	mov	DWORD PTR [ebp+24], eax
; Line 3361
	mov	eax, DWORD PTR _p$[esp+24]
	pop	esi
	mov	DWORD PTR [ebp+12], ebp
	mov	DWORD PTR [ebp+8], ebp
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3362
	add	esp, 12					; 0000000cH
	ret	0
$LN2@prepend_al:
; Line 3356
	call	DWORD PTR __imp__abort
; Line 3361
	mov	eax, DWORD PTR _p$[esp+28]
	pop	edi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3362
	add	esp, 12					; 0000000cH
	ret	0
_prepend_alloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _add_segment
_TEXT	SEGMENT
_csp$ = -8						; size = 4
_old_end$ = -4						; size = 4
_tbase$ = 8						; size = 4
_tsize$ = 12						; size = 4
_mmapped$ = 16						; size = 4
_add_segment PROC					; COMDAT
; _m$ = eax
; Line 3366
	mov	ecx, DWORD PTR _tbase$[esp-4]
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, eax
; Line 3368
	mov	esi, DWORD PTR [edi+24]
; Line 3369
	lea	edx, DWORD PTR [edi+444]
	mov	eax, edx
$LL45@add_segmen:
	mov	ebx, DWORD PTR [eax]
	cmp	esi, ebx
	jb	SHORT $LN43@add_segmen
	mov	ebp, DWORD PTR [eax+4]
	add	ebp, ebx
	cmp	esi, ebp
	jb	SHORT $LN44@add_segmen
$LN43@add_segmen:
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	jne	SHORT $LL45@add_segmen
$LN44@add_segmen:
; Line 3370
	mov	ebx, DWORD PTR [eax+4]
	add	ebx, DWORD PTR [eax]
	mov	DWORD PTR _old_end$[esp+24], ebx
; Line 3372
	add	ebx, -47				; ffffffd1H
; Line 3373
	mov	eax, ebx
	and	eax, 7
	je	SHORT $LN31@add_segmen
$LN30@add_segmen:
	neg	eax
	and	eax, 7
$LN31@add_segmen:
; Line 3374
	add	eax, ebx
; Line 3375
	lea	ebx, DWORD PTR [esi+16]
	cmp	eax, ebx
	jae	SHORT $LN32@add_segmen
	mov	eax, esi
	mov	DWORD PTR _csp$[esp+24], esi
	jmp	SHORT $LN33@add_segmen
$LN32@add_segmen:
	mov	DWORD PTR _csp$[esp+24], eax
$LN33@add_segmen:
; Line 3377
	lea	ebx, DWORD PTR [eax+8]
; Line 3383
	mov	eax, DWORD PTR _tsize$[esp+20]
	mov	ebp, ecx
	add	eax, -40				; ffffffd8H
	and	ebp, 7
	je	SHORT $LN51@add_segmen
$LN50@add_segmen:
	neg	ebp
	and	ebp, 7
$LN51@add_segmen:
	sub	eax, ebp
	add	ecx, ebp
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+24], ecx
	mov	ebp, eax
	or	ebp, 1
; Line 3391
	cmp	DWORD PTR _mmapped$[esp+20], 1
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR _csp$[esp+24]
	mov	DWORD PTR [ecx+eax+4], 40		; 00000028H
	mov	eax, DWORD PTR _mparams+16
	mov	DWORD PTR [edi+28], eax
	mov	DWORD PTR [ebp+4], 27			; 0000001bH
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ebx], ecx
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ebx+4], eax
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [ebx+8], ecx
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _tbase$[esp+20]
	mov	DWORD PTR [ebx+12], eax
	mov	eax, DWORD PTR _tsize$[esp+20]
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edi+448], eax
	je	SHORT $LN38@add_segmen
	call	DWORD PTR __imp__abort
	jmp	SHORT $LN37@add_segmen
$LN38@add_segmen:
	mov	edx, DWORD PTR [ecx+eax-4]
	add	ecx, edx
	mov	DWORD PTR [edi+456], edx
	cmp	DWORD PTR [ecx+eax-4], edx
	je	SHORT $LN36@add_segmen
	call	DWORD PTR __imp__abort
	jmp	SHORT $LN37@add_segmen
$LN36@add_segmen:
	mov	edx, DWORD PTR _tbase$[esp+20]
	mov	DWORD PTR [edx+eax-4], 0
$LN37@add_segmen:
; Line 3399
	mov	edx, DWORD PTR _old_end$[esp+24]
	lea	eax, DWORD PTR [ebp+28]
	lea	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edi+452], ebx
	mov	DWORD PTR [eax], 7
	cmp	ecx, edx
	jae	SHORT $LN25@add_segmen
$LL27@add_segmen:
; Line 3396
	add	eax, 4
	add	ecx, 4
; Line 3397
	mov	DWORD PTR [eax], 7
; Line 3399
	cmp	ecx, edx
	jb	SHORT $LL27@add_segmen
$LN25@add_segmen:
; Line 3407
	cmp	ebp, esi
	je	$LN9@add_segmen
; Line 3409
	sub	ebp, esi
	mov	ebx, ebp
; Line 3411
	and	DWORD PTR [ebx+esi+4], -2		; fffffffeH
	mov	eax, ebx
; Line 3412
	mov	ecx, ebx
	or	eax, 1
	shr	ecx, 3
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [ebx+esi], ebx
	cmp	ecx, 32					; 00000020H
	jae	SHORT $LN22@add_segmen
	mov	eax, 1
	shl	eax, cl
	lea	ebx, DWORD PTR [edi+ecx*8+36]
	mov	ecx, DWORD PTR [edi]
	mov	ebp, ebx
	test	ecx, eax
	jne	SHORT $LN21@add_segmen
	or	ecx, eax
	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [ebx+8], esi
	mov	DWORD PTR [ebp+12], esi
	pop	edi
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [esi+12], ebx
	pop	esi
	pop	ebp
	pop	ebx
; Line 3416
	add	esp, 8
	ret	0
$LN21@add_segmen:
; Line 3412
	mov	eax, DWORD PTR [ebx+8]
	cmp	eax, DWORD PTR [edi+16]
	jb	SHORT $LN19@add_segmen
	mov	DWORD PTR [ebx+8], esi
	mov	ebp, eax
	mov	DWORD PTR [ebp+12], esi
	pop	edi
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [esi+12], ebx
	pop	esi
	pop	ebp
	pop	ebx
; Line 3416
	add	esp, 8
	ret	0
$LN19@add_segmen:
; Line 3412
	call	DWORD PTR __imp__abort
	mov	DWORD PTR [ebx+8], esi
	mov	DWORD PTR [ebp+12], esi
	pop	edi
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [esi+12], ebx
	pop	esi
	pop	ebp
	pop	ebx
; Line 3416
	add	esp, 8
	ret	0
$LN22@add_segmen:
; Line 3412
	mov	eax, ebx
	shr	eax, 8
	test	eax, eax
	je	SHORT $LN13@add_segmen
$LN16@add_segmen:
	cmp	eax, 65535				; 0000ffffH
	jbe	SHORT $LN14@add_segmen
	mov	eax, 31					; 0000001fH
	jmp	SHORT $LN13@add_segmen
$LN14@add_segmen:
	lea	edx, DWORD PTR [eax-256]
	shr	edx, 16					; 00000010H
	and	edx, 8
	mov	ecx, edx
	shl	eax, cl
	lea	ecx, DWORD PTR [eax-4096]
	shr	ecx, 16					; 00000010H
	and	ecx, 4
	shl	eax, cl
	add	edx, ecx
	lea	ecx, DWORD PTR [eax-16384]
	shr	ecx, 16					; 00000010H
	and	ecx, 2
	shl	eax, cl
	shr	eax, 15					; 0000000fH
	sub	eax, ecx
	sub	eax, edx
	add	eax, 14					; 0000000eH
	lea	ecx, DWORD PTR [eax+7]
	mov	edx, ebx
	shr	edx, cl
	and	edx, 1
	lea	eax, DWORD PTR [edx+eax*2]
$LN13@add_segmen:
	xor	ecx, ecx
	mov	DWORD PTR [esi+20], ecx
	mov	DWORD PTR [esi+16], ecx
	mov	ecx, eax
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR [esi+28], eax
	mov	ecx, DWORD PTR [edi+4]
	lea	ebp, DWORD PTR [edi+eax*4+300]
	test	ecx, edx
	jne	SHORT $LN12@add_segmen
	or	ecx, edx
	mov	DWORD PTR [edi+4], ecx
	mov	DWORD PTR [ebp], esi
	mov	DWORD PTR [esi+24], ebp
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+8], esi
$LN9@add_segmen:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3416
	add	esp, 8
	ret	0
$LN12@add_segmen:
; Line 3412
	mov	edx, DWORD PTR [ebp]
	cmp	eax, 31					; 0000001fH
	jne	SHORT $LN40@add_segmen
	xor	ecx, ecx
	jmp	SHORT $LN41@add_segmen
$LN40@add_segmen:
	shr	eax, 1
	mov	ecx, 25					; 00000019H
	sub	ecx, eax
$LN41@add_segmen:
	mov	eax, ebx
	shl	eax, cl
	mov	ecx, DWORD PTR [edx+4]
	and	ecx, -4					; fffffffcH
	cmp	ecx, ebx
	je	SHORT $LN8@add_segmen
$LL10@add_segmen:
	mov	ecx, eax
	shr	ecx, 31					; 0000001fH
	lea	ebp, DWORD PTR [edx+ecx*4+16]
	mov	ecx, DWORD PTR [ebp]
	add	eax, eax
	test	ecx, ecx
	je	SHORT $LN7@add_segmen
	mov	edx, ecx
	mov	ecx, DWORD PTR [edx+4]
	and	ecx, -4					; fffffffcH
	cmp	ecx, ebx
	jne	SHORT $LL10@add_segmen
$LN8@add_segmen:
	mov	edi, DWORD PTR [edi+16]
	mov	eax, DWORD PTR [edx+8]
	cmp	edx, edi
	jb	SHORT $LN2@add_segmen
	cmp	eax, edi
	jb	SHORT $LN2@add_segmen
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [edx+8], esi
	pop	edi
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], edx
	mov	DWORD PTR [esi+24], 0
	pop	esi
	pop	ebp
	pop	ebx
; Line 3416
	add	esp, 8
	ret	0
$LN7@add_segmen:
; Line 3412
	cmp	ebp, DWORD PTR [edi+16]
	jb	SHORT $LN5@add_segmen
	mov	DWORD PTR [ebp], esi
	pop	edi
	mov	DWORD PTR [esi+24], edx
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+8], esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3416
	add	esp, 8
	ret	0
$LN5@add_segmen:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
; Line 3412
	jmp	DWORD PTR __imp__abort
$LN2@add_segmen:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3416
	add	esp, 8
; Line 3412
	jmp	DWORD PTR __imp__abort
_add_segment ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sys_alloc
_TEXT	SEGMENT
_nb$ = 8						; size = 4
_sys_alloc PROC						; COMDAT
; _m$ = eax
; Line 3421
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _nb$[esp+4]
	push	esi
	mov	esi, eax
; Line 3426
	call	_init_mparams
; Line 3429
	test	BYTE PTR [esi+436], 1
	je	SHORT $LN92@sys_alloc
	cmp	ebp, DWORD PTR _mparams+12
	jb	SHORT $LN92@sys_alloc
; Line 3430
	mov	eax, ebp
	mov	ebx, esi
	call	_mmap_alloc
; Line 3431
	test	eax, eax
; Line 3432
	jne	$LN41@sys_alloc
$LN92@sys_alloc:
; Line 3513
	mov	eax, DWORD PTR _mparams+8
	lea	ebx, DWORD PTR [eax+ebp+41]
	dec	eax
	not	eax
	and	ebx, eax
	push	edi
; Line 3514
	cmp	ebx, ebp
	jbe	$LN1@sys_alloc
; Line 3515
	push	64					; 00000040H
	push	12288					; 00003000H
	push	ebx
	push	0
	call	DWORD PTR __imp__VirtualAlloc@16
	mov	edi, eax
	test	edi, edi
; Line 3516
	je	$LN1@sys_alloc
	cmp	edi, -1
	je	$LN1@sys_alloc
; Line 3545
	add	DWORD PTR [esi+428], ebx
	mov	eax, DWORD PTR [esi+428]
	cmp	eax, DWORD PTR [esi+432]
	jbe	SHORT $LN15@sys_alloc
; Line 3546
	mov	DWORD PTR [esi+432], eax
$LN15@sys_alloc:
; Line 3548
	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN14@sys_alloc
; Line 3549
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+444], edi
; Line 3550
	mov	DWORD PTR [esi+448], ebx
; Line 3551
	mov	eax, DWORD PTR [edi+ebx-4]
	lea	ecx, DWORD PTR [eax+edi]
	mov	DWORD PTR [esi+456], eax
	cmp	DWORD PTR [ecx+ebx-4], eax
	je	SHORT $LN59@sys_alloc
	call	DWORD PTR __imp__abort
	jmp	SHORT $LN60@sys_alloc
$LN59@sys_alloc:
	mov	DWORD PTR [edi+ebx-4], 0
$LN60@sys_alloc:
; Line 3552
	mov	edx, DWORD PTR _mparams
	mov	DWORD PTR [esi+32], edx
	lea	eax, DWORD PTR [esi+36]
	mov	ecx, 32					; 00000020H
	npad	3
; Line 3553
$LL79@sys_alloc:
	mov	DWORD PTR [eax+12], eax
	mov	DWORD PTR [eax+8], eax
	add	eax, 8
	sub	ecx, 1
	jne	SHORT $LL79@sys_alloc
; Line 3554
	cmp	esi, OFFSET __gm_
	jne	SHORT $LN13@sys_alloc
; Line 3555
	lea	edx, DWORD PTR [ebx-40]
	mov	ecx, edi
	call	_init_top
; Line 3556
	jmp	SHORT $LN2@sys_alloc
$LN13@sys_alloc:
; Line 3558
	mov	eax, DWORD PTR [esi-4]
	and	eax, -4					; fffffffcH
	lea	ecx, DWORD PTR [eax+esi-8]
; Line 3559
	sub	edi, ecx
	lea	edx, DWORD PTR [edi+ebx-40]
	call	_init_top
; Line 3563
	jmp	SHORT $LN2@sys_alloc
$LN14@sys_alloc:
; Line 3565
	lea	ecx, DWORD PTR [esi+444]
; Line 3566
	test	ecx, ecx
	je	SHORT $LN95@sys_alloc
$LL10@sys_alloc:
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR [ecx]
	cmp	edi, edx
	je	SHORT $LN9@sys_alloc
; Line 3567
	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, ecx
	jne	SHORT $LL10@sys_alloc
$LN95@sys_alloc:
; Line 3577
	cmp	edi, DWORD PTR [esi+16]
	jae	SHORT $LN6@sys_alloc
; Line 3578
	mov	DWORD PTR [esi+16], edi
$LN6@sys_alloc:
; Line 3579
	lea	eax, DWORD PTR [esi+444]
; Line 3580
	test	eax, eax
	je	SHORT $LN3@sys_alloc
	lea	ecx, DWORD PTR [edi+ebx]
$LL5@sys_alloc:
	cmp	DWORD PTR [eax], ecx
	je	SHORT $LN4@sys_alloc
; Line 3581
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	jne	SHORT $LL5@sys_alloc
$LN3@sys_alloc:
; Line 3592
	push	1
	push	ebx
	push	edi
	mov	eax, esi
	call	_add_segment
	add	esp, 12					; 0000000cH
$LN2@sys_alloc:
; Line 3596
	mov	eax, DWORD PTR [esi+12]
	cmp	ebp, eax
	jae	SHORT $LN1@sys_alloc
; Line 3598
	mov	ecx, DWORD PTR [esi+24]
	sub	eax, ebp
	mov	DWORD PTR [esi+12], eax
; Line 3599
	lea	edx, DWORD PTR [ecx+ebp]
; Line 3600
	or	eax, 1
	pop	edi
	mov	DWORD PTR [esi+24], edx
; Line 3601
	or	ebp, 3
	mov	DWORD PTR [edx+4], eax
	pop	esi
	mov	DWORD PTR [ecx+4], ebp
	pop	ebp
; Line 3604
	lea	eax, DWORD PTR [ecx+8]
	pop	ebx
; Line 3610
	ret	0
$LN9@sys_alloc:
; Line 3572
	mov	eax, DWORD PTR [edi+ebx-4]
	cmp	eax, DWORD PTR [ecx+12]
	jne	SHORT $LN95@sys_alloc
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [esi+24], eax
	jb	SHORT $LN95@sys_alloc
	mov	edx, DWORD PTR [ecx+4]
	add	eax, edx
	cmp	DWORD PTR [esi+24], eax
	jae	SHORT $LN95@sys_alloc
; Line 3573
	add	edx, ebx
	mov	DWORD PTR [ecx+4], edx
; Line 3574
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [esi+24]
	add	edx, ebx
	call	_init_top
; Line 3576
	jmp	SHORT $LN2@sys_alloc
$LN4@sys_alloc:
; Line 3585
	mov	ecx, DWORD PTR [ecx-4]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN3@sys_alloc
; Line 3586
	mov	ecx, DWORD PTR [eax]
; Line 3588
	add	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax], edi
; Line 3589
	push	esi
	mov	eax, ebp
	mov	edx, edi
	call	_prepend_alloc
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 3610
	ret	0
$LN1@sys_alloc:
; Line 3609
	xor	eax, eax
	pop	edi
$LN41@sys_alloc:
	pop	esi
	pop	ebp
	pop	ebx
; Line 3610
	ret	0
_sys_alloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _release_unused_segments
_TEXT	SEGMENT
_sp$ = -24						; size = 4
_released$ = -20					; size = 4
_size$32660 = -16					; size = 4
_pred$ = -12						; size = 4
_next$32661 = -8					; size = 4
_base$32659 = -4					; size = 4
_m$ = 8							; size = 4
_release_unused_segments PROC				; COMDAT
; Line 3615
	sub	esp, 24					; 00000018H
; Line 3617
	mov	edx, DWORD PTR _m$[esp+20]
	lea	eax, DWORD PTR [edx+444]
	push	ebp
	mov	DWORD PTR _pred$[esp+28], eax
; Line 3618
	mov	eax, DWORD PTR [eax+8]
	xor	ebp, ebp
	xor	ecx, ecx
	mov	DWORD PTR _released$[esp+28], ecx
	mov	DWORD PTR _sp$[esp+28], eax
; Line 3619
	cmp	eax, ebp
	je	$LN74@release_un
	push	ebx
	push	esi
	push	edi
	npad	4
$LL52@release_un:
; Line 3620
	mov	eax, DWORD PTR _sp$[esp+40]
	mov	ecx, DWORD PTR [eax]
; Line 3621
	mov	edi, DWORD PTR [eax+4]
; Line 3622
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _next$32661[esp+40], eax
; Line 3624
	mov	eax, ecx
	and	eax, 7
	mov	DWORD PTR _base$32659[esp+40], ecx
	mov	DWORD PTR _size$32660[esp+40], edi
	je	SHORT $LN56@release_un
$LN55@release_un:
	neg	eax
	and	eax, 7
$LN56@release_un:
	lea	esi, DWORD PTR [eax+ecx]
; Line 3625
	mov	eax, DWORD PTR [esi+4]
	mov	ebx, eax
	and	ebx, -4					; fffffffcH
; Line 3627
	test	al, 2
	jne	$LN9@release_un
	lea	ecx, DWORD PTR [edi+ecx-40]
	lea	eax, DWORD PTR [ebx+esi]
	cmp	eax, ecx
	jb	$LN9@release_un
; Line 3630
	cmp	esi, DWORD PTR [edx+20]
	jne	SHORT $LN48@release_un
; Line 3631
	mov	DWORD PTR [edx+20], ebp
; Line 3632
	mov	DWORD PTR [edx+8], ebp
; Line 3634
	jmp	$LN77@release_un
$LN48@release_un:
; Line 3635
	mov	edi, DWORD PTR [esi+12]
	mov	ebp, DWORD PTR [esi+24]
	cmp	edi, esi
	je	SHORT $LN46@release_un
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, DWORD PTR [edx+16]
	jb	SHORT $LN37@release_un
	mov	DWORD PTR [eax+12], edi
	mov	DWORD PTR [edi+8], eax
	jmp	SHORT $LN79@release_un
$LN46@release_un:
	mov	edi, DWORD PTR [esi+20]
	lea	ecx, DWORD PTR [esi+20]
	test	edi, edi
	jne	SHORT $LL40@release_un
	mov	edi, DWORD PTR [esi+16]
	lea	ecx, DWORD PTR [esi+16]
	test	edi, edi
	je	SHORT $LN79@release_un
$LL40@release_un:
	cmp	DWORD PTR [edi+20], 0
	lea	eax, DWORD PTR [edi+20]
	jne	SHORT $LN38@release_un
	cmp	DWORD PTR [edi+16], 0
	lea	eax, DWORD PTR [edi+16]
	je	SHORT $LN39@release_un
$LN38@release_un:
	mov	edi, DWORD PTR [eax]
	mov	ecx, eax
	jmp	SHORT $LL40@release_un
$LN39@release_un:
	cmp	ecx, DWORD PTR [edx+16]
	jb	SHORT $LN37@release_un
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN79@release_un
$LN37@release_un:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _m$[esp+36]
$LN79@release_un:
	test	ebp, ebp
	je	$LN77@release_un
	mov	ecx, DWORD PTR [esi+28]
	cmp	esi, DWORD PTR [edx+ecx*4+300]
	lea	eax, DWORD PTR [edx+ecx*4+300]
	jne	SHORT $LN34@release_un
	mov	DWORD PTR [eax], edi
	test	edi, edi
	jne	SHORT $LN67@release_un
	mov	ecx, DWORD PTR [esi+28]
	mov	eax, 1
	shl	eax, cl
	not	eax
	and	DWORD PTR [edx+4], eax
	jmp	SHORT $LN77@release_un
$LN34@release_un:
	cmp	ebp, DWORD PTR [edx+16]
	jb	SHORT $LN31@release_un
	cmp	DWORD PTR [ebp+16], esi
	jne	SHORT $LN30@release_un
	mov	DWORD PTR [ebp+16], edi
	jmp	SHORT $LN28@release_un
$LN30@release_un:
	mov	DWORD PTR [ebp+20], edi
	jmp	SHORT $LN28@release_un
$LN31@release_un:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _m$[esp+36]
$LN28@release_un:
	test	edi, edi
	je	SHORT $LN77@release_un
$LN67@release_un:
	cmp	edi, DWORD PTR [edx+16]
	jb	SHORT $LN26@release_un
	mov	DWORD PTR [edi+24], ebp
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN76@release_un
	cmp	eax, DWORD PTR [edx+16]
	jb	SHORT $LN24@release_un
	mov	DWORD PTR [edi+16], eax
	mov	DWORD PTR [eax+24], edi
	jmp	SHORT $LN76@release_un
$LN24@release_un:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _m$[esp+36]
$LN76@release_un:
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN77@release_un
	cmp	eax, DWORD PTR [edx+16]
	jb	SHORT $LN26@release_un
	mov	DWORD PTR [edi+20], eax
	mov	DWORD PTR [eax+24], edi
	jmp	SHORT $LN77@release_un
$LN26@release_un:
	call	DWORD PTR __imp__abort
$LN77@release_un:
; Line 3637
	mov	eax, DWORD PTR _size$32660[esp+40]
	mov	ecx, DWORD PTR _base$32659[esp+40]
	call	_win32munmap
	test	eax, eax
	jne	SHORT $LN18@release_un
; Line 3638
	mov	eax, DWORD PTR _size$32660[esp+40]
; Line 3639
	mov	ecx, DWORD PTR _m$[esp+36]
	add	DWORD PTR _released$[esp+40], eax
	sub	DWORD PTR [ecx+428], eax
; Line 3641
	mov	eax, DWORD PTR _pred$[esp+40]
; Line 3642
	mov	ecx, DWORD PTR _next$32661[esp+40]
; Line 3644
	mov	edx, DWORD PTR _m$[esp+36]
	mov	DWORD PTR _sp$[esp+40], eax
	mov	DWORD PTR [eax+8], ecx
	jmp	$LN9@release_un
$LN18@release_un:
; Line 3645
	mov	eax, ebx
	shr	eax, 8
	test	eax, eax
	je	SHORT $LN13@release_un
$LN16@release_un:
	cmp	eax, 65535				; 0000ffffH
	jbe	SHORT $LN14@release_un
	mov	eax, 31					; 0000001fH
	jmp	SHORT $LN13@release_un
$LN14@release_un:
	lea	edx, DWORD PTR [eax-256]
	shr	edx, 16					; 00000010H
	and	edx, 8
	mov	ecx, edx
	shl	eax, cl
	lea	ecx, DWORD PTR [eax-4096]
	shr	ecx, 16					; 00000010H
	and	ecx, 4
	shl	eax, cl
	add	edx, ecx
	lea	ecx, DWORD PTR [eax-16384]
	shr	ecx, 16					; 00000010H
	and	ecx, 2
	shl	eax, cl
	shr	eax, 15					; 0000000fH
	sub	eax, ecx
	sub	eax, edx
	add	eax, 14					; 0000000eH
	lea	ecx, DWORD PTR [eax+7]
	mov	edx, ebx
	shr	edx, cl
	and	edx, 1
	lea	eax, DWORD PTR [edx+eax*2]
$LN13@release_un:
	mov	ebp, DWORD PTR _m$[esp+36]
	xor	ecx, ecx
	mov	DWORD PTR [esi+20], ecx
	mov	DWORD PTR [esi+16], ecx
	mov	ecx, eax
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR [esi+28], eax
	mov	ecx, DWORD PTR [ebp+4]
	lea	edi, DWORD PTR [ebp+eax*4+300]
	test	edx, ecx
	jne	SHORT $LN12@release_un
	or	edx, ecx
	mov	DWORD PTR [ebp+4], edx
	mov	DWORD PTR [edi], esi
	mov	DWORD PTR [esi+24], edi
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+8], esi
	jmp	$LN83@release_un
$LN12@release_un:
	mov	edx, DWORD PTR [edi]
	cmp	eax, 31					; 0000001fH
	jne	SHORT $LN59@release_un
	xor	ecx, ecx
	jmp	SHORT $LN60@release_un
$LN59@release_un:
	shr	eax, 1
	mov	ecx, 25					; 00000019H
	sub	ecx, eax
$LN60@release_un:
	mov	eax, ebx
	shl	eax, cl
	mov	ecx, DWORD PTR [edx+4]
	and	ecx, -4					; fffffffcH
	cmp	ecx, ebx
	je	SHORT $LN8@release_un
	npad	5
$LL10@release_un:
	mov	ecx, eax
	shr	ecx, 31					; 0000001fH
	lea	edi, DWORD PTR [edx+ecx*4+16]
	mov	ecx, DWORD PTR [edi]
	add	eax, eax
	test	ecx, ecx
	je	SHORT $LN7@release_un
	mov	edx, ecx
	mov	ecx, DWORD PTR [edx+4]
	and	ecx, -4					; fffffffcH
	cmp	ecx, ebx
	jne	SHORT $LL10@release_un
$LN8@release_un:
	mov	ecx, DWORD PTR [ebp+16]
	mov	eax, DWORD PTR [edx+8]
	cmp	edx, ecx
	jb	SHORT $LN2@release_un
	cmp	eax, ecx
	jb	SHORT $LN2@release_un
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [edx+8], esi
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], edx
	mov	DWORD PTR [esi+24], 0
	jmp	SHORT $LN83@release_un
$LN7@release_un:
	cmp	edi, DWORD PTR [ebp+16]
	jb	SHORT $LN2@release_un
	mov	DWORD PTR [edi], esi
	mov	DWORD PTR [esi+24], edx
	mov	DWORD PTR [esi+12], esi
	mov	DWORD PTR [esi+8], esi
	jmp	SHORT $LN83@release_un
$LN2@release_un:
	call	DWORD PTR __imp__abort
$LN83@release_un:
	mov	edx, ebp
$LN9@release_un:
; Line 3649
	mov	eax, DWORD PTR _sp$[esp+40]
	mov	DWORD PTR _pred$[esp+40], eax
; Line 3650
	mov	eax, DWORD PTR _next$32661[esp+40]
	xor	ebp, ebp
	mov	DWORD PTR _sp$[esp+40], eax
	cmp	eax, ebp
	jne	$LL52@release_un
; Line 3652
	mov	eax, DWORD PTR _released$[esp+40]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
; Line 3653
	add	esp, 24					; 00000018H
	ret	0
$LN74@release_un:
; Line 3652
	mov	eax, ecx
	pop	ebp
; Line 3653
	add	esp, 24					; 00000018H
	ret	0
_release_unused_segments ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sys_trim
_TEXT	SEGMENT
_released$ = -4						; size = 4
_sys_trim PROC						; COMDAT
; _m$ = eax
; _pad$ = ecx
; Line 3655
	push	ecx
; Line 3656
	xor	edx, edx
	push	esi
	mov	esi, eax
	mov	DWORD PTR _released$[esp+8], edx
; Line 3657
	cmp	ecx, -64				; ffffffc0H
	jae	$LN31@sys_trim
	push	ebx
	mov	ebx, DWORD PTR [esi+24]
	test	ebx, ebx
	je	$LN32@sys_trim
; Line 3660
	mov	eax, DWORD PTR [esi+12]
	add	ecx, 40					; 00000028H
	cmp	eax, ecx
	jbe	SHORT $LN30@sys_trim
; Line 3664
	sub	eax, ecx
	mov	ecx, DWORD PTR _mparams+8
	lea	eax, DWORD PTR [eax+ecx-1]
	div	ecx
	push	edi
; Line 3665
	mov	edx, ebx
	mov	edi, eax
	dec	edi
	mov	eax, esi
	imul	edi, ecx
	call	_segment_holding
	mov	ebx, eax
; Line 3671
	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, edi
	jb	SHORT $LN33@sys_trim
	mov	edx, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [esi+444]
	push	ebp
	npad	7
$LL23@sys_trim:
	cmp	ecx, edx
	jb	SHORT $LN21@sys_trim
	lea	ebp, DWORD PTR [edx+eax]
	cmp	ecx, ebp
	jb	SHORT $LN34@sys_trim
$LN21@sys_trim:
	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, ecx
	jne	SHORT $LL23@sys_trim
; Line 3672
	sub	eax, edi
; Line 3675
	lea	ecx, DWORD PTR [edx+eax]
	mov	eax, edi
	call	_win32munmap
	test	eax, eax
	jne	SHORT $LN34@sys_trim
; Line 3676
	mov	DWORD PTR _released$[esp+20], edi
; Line 3698
	test	edi, edi
	je	SHORT $LN34@sys_trim
; Line 3699
	sub	DWORD PTR [ebx+4], edi
; Line 3701
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [esi+24]
	sub	DWORD PTR [esi+428], edi
	sub	edx, edi
	call	_init_top
$LN34@sys_trim:
	pop	ebp
$LN33@sys_trim:
	pop	edi
$LN30@sys_trim:
; Line 3708
	push	esi
	call	_release_unused_segments
	mov	edx, DWORD PTR _released$[esp+16]
	add	esp, 4
	add	edx, eax
; Line 3711
	jne	SHORT $LN32@sys_trim
; Line 3712
	mov	DWORD PTR [esi+28], -1
$LN32@sys_trim:
	pop	ebx
$LN31@sys_trim:
; Line 3715
	xor	eax, eax
	test	edx, edx
	setne	al
	pop	esi
; Line 3716
	pop	ecx
	ret	0
_sys_trim ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _tmalloc_large
_TEXT	SEGMENT
_XP$32956 = -4						; size = 4
_rst$32914 = -4						; size = 4
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_nb$ = 12						; size = 4
_tmalloc_large PROC					; COMDAT
; Line 3721
	push	ecx
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _nb$[esp+8]
	push	esi
; Line 3726
	mov	eax, ebp
	mov	ebx, ebp
	push	edi
	xor	edi, edi
	shr	eax, 8
	neg	ebx
	mov	DWORD PTR _v$[esp+16], edi
	test	eax, eax
	jne	SHORT $LN71@tmalloc_la
	xor	esi, esi
	jmp	SHORT $LN68@tmalloc_la
$LN71@tmalloc_la:
	cmp	eax, 65535				; 0000ffffH
	jbe	SHORT $LN69@tmalloc_la
	mov	esi, 31					; 0000001fH
	jmp	SHORT $LN68@tmalloc_la
$LN69@tmalloc_la:
	lea	edx, DWORD PTR [eax-256]
	shr	edx, 16					; 00000010H
	and	edx, 8
	mov	ecx, edx
	shl	eax, cl
	lea	ecx, DWORD PTR [eax-4096]
	shr	ecx, 16					; 00000010H
	and	ecx, 4
	shl	eax, cl
	add	edx, ecx
	lea	ecx, DWORD PTR [eax-16384]
	shr	ecx, 16					; 00000010H
	and	ecx, 2
	shl	eax, cl
	shr	eax, 15					; 0000000fH
	sub	eax, ecx
	sub	eax, edx
	add	eax, 14					; 0000000eH
	lea	ecx, DWORD PTR [eax+7]
	mov	edx, ebp
	shr	edx, cl
	and	edx, 1
	lea	esi, DWORD PTR [edx+eax*2]
$LN68@tmalloc_la:
; Line 3728
	mov	eax, DWORD PTR _m$[esp+16]
	mov	eax, DWORD PTR [eax+esi*4+300]
	test	eax, eax
	je	SHORT $LN93@tmalloc_la
; Line 3730
	cmp	esi, 31					; 0000001fH
	jne	SHORT $LN74@tmalloc_la
	xor	ecx, ecx
	jmp	SHORT $LN75@tmalloc_la
$LN74@tmalloc_la:
	mov	edx, esi
	shr	edx, 1
	mov	ecx, 25					; 00000019H
	sub	ecx, edx
$LN75@tmalloc_la:
	mov	edx, ebp
	shl	edx, cl
; Line 3731
	mov	DWORD PTR _rst$32914[esp+20], edi
	npad	2
$LL66@tmalloc_la:
; Line 3734
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -4					; fffffffcH
	sub	ecx, ebp
; Line 3735
	cmp	ecx, ebx
	jae	SHORT $LN63@tmalloc_la
; Line 3736
	mov	edi, eax
	mov	DWORD PTR _v$[esp+16], edi
; Line 3737
	mov	ebx, ecx
	test	ecx, ecx
	je	SHORT $LN65@tmalloc_la
$LN63@tmalloc_la:
; Line 3740
	mov	ecx, DWORD PTR [eax+20]
; Line 3741
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	mov	eax, DWORD PTR [eax+edi*4+16]
; Line 3742
	test	ecx, ecx
	je	SHORT $LN104@tmalloc_la
	cmp	ecx, eax
	je	SHORT $LN104@tmalloc_la
; Line 3743
	mov	DWORD PTR _rst$32914[esp+20], ecx
$LN104@tmalloc_la:
; Line 3744
	test	eax, eax
	je	SHORT $LN85@tmalloc_la
; Line 3748
	add	edx, edx
; Line 3749
	jmp	SHORT $LL66@tmalloc_la
$LN85@tmalloc_la:
; Line 3745
	mov	eax, DWORD PTR _rst$32914[esp+20]
	mov	edi, DWORD PTR _v$[esp+16]
$LN65@tmalloc_la:
; Line 3752
	test	eax, eax
	jne	SHORT $LL58@tmalloc_la
	test	edi, edi
	jne	$LN97@tmalloc_la
$LN93@tmalloc_la:
; Line 3753
	or	edx, -1
	mov	ecx, esi
	shl	edx, cl
	mov	ecx, DWORD PTR _m$[esp+16]
	add	edx, edx
	and	edx, DWORD PTR [ecx+4]
; Line 3754
	je	SHORT $LN81@tmalloc_la
; Line 3756
	mov	eax, edx
	neg	eax
	and	eax, edx
; Line 3757
	dec	eax
	mov	edx, eax
	shr	edx, 12					; 0000000cH
	and	edx, 16					; 00000010H
	mov	ecx, edx
	shr	eax, cl
	mov	ecx, eax
	shr	ecx, 5
	and	ecx, 8
	shr	eax, cl
	add	edx, ecx
	mov	ecx, eax
	shr	ecx, 2
	and	ecx, 4
	shr	eax, cl
	add	edx, ecx
	mov	ecx, eax
	shr	ecx, 1
	and	ecx, 2
	shr	eax, cl
	add	edx, ecx
	mov	ecx, eax
	shr	ecx, 1
	and	ecx, 1
	shr	eax, cl
; Line 3758
	add	eax, edx
	mov	edx, DWORD PTR _m$[esp+16]
	add	eax, ecx
	mov	eax, DWORD PTR [edx+eax*4+300]
$LN81@tmalloc_la:
; Line 3762
	test	eax, eax
	je	SHORT $LN57@tmalloc_la
$LL58@tmalloc_la:
; Line 3763
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -4					; fffffffcH
	sub	ecx, ebp
; Line 3764
	cmp	ecx, ebx
	jae	SHORT $LN56@tmalloc_la
; Line 3765
	mov	ebx, ecx
; Line 3766
	mov	edi, eax
$LN56@tmalloc_la:
; Line 3768
	mov	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN76@tmalloc_la
	mov	eax, ecx
	jmp	SHORT $LN77@tmalloc_la
$LN76@tmalloc_la:
	mov	eax, DWORD PTR [eax+20]
$LN77@tmalloc_la:
; Line 3762
	test	eax, eax
	jne	SHORT $LL58@tmalloc_la
; Line 3766
	mov	DWORD PTR _v$[esp+16], edi
$LN57@tmalloc_la:
; Line 3772
	test	edi, edi
	je	$LN55@tmalloc_la
$LN97@tmalloc_la:
	mov	eax, DWORD PTR _m$[esp+16]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, ebp
	cmp	ebx, ecx
	jae	$LN55@tmalloc_la
; Line 3773
	mov	edx, DWORD PTR [eax+16]
	cmp	edi, edx
	jb	$LN53@tmalloc_la
; Line 3774
	mov	eax, DWORD PTR _v$[esp+16]
	lea	edi, DWORD PTR [eax+ebp]
; Line 3776
	cmp	eax, edi
	jae	$LN53@tmalloc_la
; Line 3777
	mov	esi, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _XP$32956[esp+20], ecx
	cmp	esi, eax
	je	SHORT $LN52@tmalloc_la
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, edx
	jb	SHORT $LN43@tmalloc_la
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [esi+8], eax
	jmp	SHORT $LN105@tmalloc_la
$LN52@tmalloc_la:
	mov	esi, DWORD PTR [eax+20]
	lea	ecx, DWORD PTR [eax+20]
	test	esi, esi
	jne	SHORT $LL46@tmalloc_la
	mov	esi, DWORD PTR [eax+16]
	lea	ecx, DWORD PTR [eax+16]
	test	esi, esi
	je	SHORT $LN105@tmalloc_la
	npad	6
$LL46@tmalloc_la:
	cmp	DWORD PTR [esi+20], 0
	lea	eax, DWORD PTR [esi+20]
	jne	SHORT $LN44@tmalloc_la
	cmp	DWORD PTR [esi+16], 0
	lea	eax, DWORD PTR [esi+16]
	je	SHORT $LN45@tmalloc_la
$LN44@tmalloc_la:
	mov	esi, DWORD PTR [eax]
	mov	ecx, eax
	jmp	SHORT $LL46@tmalloc_la
$LN45@tmalloc_la:
	cmp	ecx, edx
	jb	SHORT $LN43@tmalloc_la
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN105@tmalloc_la
$LN43@tmalloc_la:
	call	DWORD PTR __imp__abort
$LN105@tmalloc_la:
	cmp	DWORD PTR _XP$32956[esp+20], 0
	je	$LN25@tmalloc_la
	mov	ecx, DWORD PTR _v$[esp+16]
	mov	eax, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _m$[esp+16]
	cmp	ecx, DWORD PTR [edx+eax*4+300]
	lea	eax, DWORD PTR [edx+eax*4+300]
	jne	SHORT $LN40@tmalloc_la
	mov	DWORD PTR [eax], esi
	test	esi, esi
	jne	SHORT $LN87@tmalloc_la
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, 1
	shl	eax, cl
	not	eax
	and	DWORD PTR [edx+4], eax
	jmp	SHORT $LN25@tmalloc_la
$LN40@tmalloc_la:
	mov	eax, DWORD PTR _XP$32956[esp+20]
	cmp	eax, DWORD PTR [edx+16]
	jb	SHORT $LN37@tmalloc_la
	cmp	DWORD PTR [eax+16], ecx
	jne	SHORT $LN36@tmalloc_la
	mov	DWORD PTR [eax+16], esi
	jmp	SHORT $LN34@tmalloc_la
$LN36@tmalloc_la:
	mov	DWORD PTR [eax+20], esi
	jmp	SHORT $LN34@tmalloc_la
$LN37@tmalloc_la:
	call	DWORD PTR __imp__abort
$LN34@tmalloc_la:
	test	esi, esi
	je	SHORT $LN25@tmalloc_la
	mov	ecx, DWORD PTR _v$[esp+16]
	mov	edx, DWORD PTR _m$[esp+16]
$LN87@tmalloc_la:
	cmp	esi, DWORD PTR [edx+16]
	jb	SHORT $LN32@tmalloc_la
	mov	eax, DWORD PTR _XP$32956[esp+20]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR [ecx+16]
	test	eax, eax
	je	SHORT $LN29@tmalloc_la
	cmp	eax, DWORD PTR [edx+16]
	jb	SHORT $LN30@tmalloc_la
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [eax+24], esi
	jmp	SHORT $LN29@tmalloc_la
$LN30@tmalloc_la:
	call	DWORD PTR __imp__abort
	mov	ecx, DWORD PTR _v$[esp+16]
$LN29@tmalloc_la:
	mov	eax, DWORD PTR [ecx+20]
	test	eax, eax
	je	SHORT $LN25@tmalloc_la
	mov	ecx, DWORD PTR _m$[esp+16]
	cmp	eax, DWORD PTR [ecx+16]
	jb	SHORT $LN32@tmalloc_la
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [eax+24], esi
	jmp	SHORT $LN25@tmalloc_la
$LN32@tmalloc_la:
	call	DWORD PTR __imp__abort
$LN25@tmalloc_la:
; Line 3779
	mov	eax, DWORD PTR _v$[esp+16]
	cmp	ebx, 16					; 00000010H
	jae	SHORT $LN24@tmalloc_la
	lea	edx, DWORD PTR [ebx+ebp]
	add	ebx, eax
	or	edx, 3
	mov	DWORD PTR [eax+4], edx
	or	DWORD PTR [ebx+ebp+4], 1
	lea	eax, DWORD PTR [ebx+ebp+4]
; Line 3785
	mov	eax, DWORD PTR _v$[esp+16]
	pop	edi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3791
	pop	ecx
	ret	0
$LN24@tmalloc_la:
; Line 3781
	or	ebp, 3
; Line 3782
	mov	ecx, ebx
	or	ecx, 1
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [edi+4], ecx
; Line 3783
	mov	ecx, ebx
	shr	ecx, 3
	mov	DWORD PTR [edi+ebx], ebx
	cmp	ecx, 32					; 00000020H
	jae	SHORT $LN22@tmalloc_la
	mov	edx, DWORD PTR _m$[esp+16]
	mov	eax, 1
	shl	eax, cl
	lea	esi, DWORD PTR [edx+ecx*8+36]
	mov	ecx, DWORD PTR [edx]
	mov	ebx, esi
	test	ecx, eax
	jne	SHORT $LN21@tmalloc_la
	or	ecx, eax
; Line 3785
	mov	eax, DWORD PTR _v$[esp+16]
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [ebx+12], edi
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+12], esi
	pop	edi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3791
	pop	ecx
	ret	0
$LN21@tmalloc_la:
; Line 3783
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, DWORD PTR [edx+16]
	jb	SHORT $LN19@tmalloc_la
	mov	ebx, eax
; Line 3785
	mov	eax, DWORD PTR _v$[esp+16]
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [ebx+12], edi
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+12], esi
	pop	edi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3791
	pop	ecx
	ret	0
$LN19@tmalloc_la:
; Line 3783
	call	DWORD PTR __imp__abort
; Line 3785
	mov	eax, DWORD PTR _v$[esp+16]
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [ebx+12], edi
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+12], esi
	pop	edi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3791
	pop	ecx
	ret	0
$LN22@tmalloc_la:
; Line 3783
	mov	eax, ebx
	shr	eax, 8
	test	eax, eax
	je	SHORT $LN13@tmalloc_la
$LN16@tmalloc_la:
	cmp	eax, 65535				; 0000ffffH
	jbe	SHORT $LN14@tmalloc_la
	mov	eax, 31					; 0000001fH
	jmp	SHORT $LN13@tmalloc_la
$LN14@tmalloc_la:
	lea	edx, DWORD PTR [eax-256]
	shr	edx, 16					; 00000010H
	and	edx, 8
	mov	ecx, edx
	shl	eax, cl
	lea	ecx, DWORD PTR [eax-4096]
	shr	ecx, 16					; 00000010H
	and	ecx, 4
	shl	eax, cl
	add	edx, ecx
	lea	ecx, DWORD PTR [eax-16384]
	shr	ecx, 16					; 00000010H
	and	ecx, 2
	shl	eax, cl
	shr	eax, 15					; 0000000fH
	sub	eax, ecx
	sub	eax, edx
	add	eax, 14					; 0000000eH
	lea	ecx, DWORD PTR [eax+7]
	mov	edx, ebx
	shr	edx, cl
	and	edx, 1
	lea	eax, DWORD PTR [edx+eax*2]
$LN13@tmalloc_la:
	mov	ebp, DWORD PTR _m$[esp+16]
	xor	ecx, ecx
	mov	DWORD PTR [edi+20], ecx
	mov	DWORD PTR [edi+16], ecx
	mov	ecx, eax
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR [edi+28], eax
	mov	ecx, DWORD PTR [ebp+4]
	lea	esi, DWORD PTR [ebp+eax*4+300]
	test	edx, ecx
	jne	SHORT $LN12@tmalloc_la
; Line 3785
	mov	eax, DWORD PTR _v$[esp+16]
	or	edx, ecx
	mov	DWORD PTR [ebp+4], edx
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [edi+24], esi
	mov	DWORD PTR [edi+12], edi
	mov	DWORD PTR [edi+8], edi
	pop	edi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3791
	pop	ecx
	ret	0
$LN12@tmalloc_la:
; Line 3783
	mov	edx, DWORD PTR [esi]
	cmp	eax, 31					; 0000001fH
	jne	SHORT $LN78@tmalloc_la
	xor	ecx, ecx
	jmp	SHORT $LN79@tmalloc_la
$LN78@tmalloc_la:
	shr	eax, 1
	mov	ecx, 25					; 00000019H
	sub	ecx, eax
$LN79@tmalloc_la:
	mov	eax, ebx
	shl	eax, cl
	mov	ecx, DWORD PTR [edx+4]
	and	ecx, -4					; fffffffcH
	cmp	ecx, ebx
	je	SHORT $LN8@tmalloc_la
$LL10@tmalloc_la:
	mov	ecx, eax
	shr	ecx, 31					; 0000001fH
	lea	esi, DWORD PTR [edx+ecx*4+16]
	mov	ecx, DWORD PTR [esi]
	add	eax, eax
	test	ecx, ecx
	je	SHORT $LN7@tmalloc_la
	mov	edx, ecx
	mov	ecx, DWORD PTR [edx+4]
	and	ecx, -4					; fffffffcH
	cmp	ecx, ebx
	jne	SHORT $LL10@tmalloc_la
$LN8@tmalloc_la:
	mov	ecx, DWORD PTR [ebp+16]
	mov	eax, DWORD PTR [edx+8]
	cmp	edx, ecx
	jb	SHORT $LN2@tmalloc_la
	cmp	eax, ecx
	jb	SHORT $LN2@tmalloc_la
	mov	DWORD PTR [eax+12], edi
	mov	DWORD PTR [edx+8], edi
	mov	DWORD PTR [edi+8], eax
; Line 3785
	mov	eax, DWORD PTR _v$[esp+16]
	mov	DWORD PTR [edi+12], edx
	mov	DWORD PTR [edi+24], 0
	pop	edi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3791
	pop	ecx
	ret	0
$LN7@tmalloc_la:
; Line 3783
	cmp	esi, DWORD PTR [ebp+16]
	jb	SHORT $LN2@tmalloc_la
; Line 3785
	mov	eax, DWORD PTR _v$[esp+16]
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [edi+24], edx
	mov	DWORD PTR [edi+12], edi
	mov	DWORD PTR [edi+8], edi
	pop	edi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3791
	pop	ecx
	ret	0
$LN2@tmalloc_la:
; Line 3783
	call	DWORD PTR __imp__abort
; Line 3785
	mov	eax, DWORD PTR _v$[esp+16]
	pop	edi
	pop	esi
	pop	ebp
	add	eax, 8
	pop	ebx
; Line 3791
	pop	ecx
	ret	0
$LN53@tmalloc_la:
; Line 3788
	call	DWORD PTR __imp__abort
$LN55@tmalloc_la:
	pop	edi
	pop	esi
	pop	ebp
; Line 3790
	xor	eax, eax
	pop	ebx
; Line 3791
	pop	ecx
	ret	0
_tmalloc_large ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _tmalloc_small
_TEXT	SEGMENT
_r$33102 = -4						; size = 4
_DV$33171 = 8						; size = 4
_XP$33108 = 8						; size = 4
_m$ = 8							; size = 4
_nb$ = 12						; size = 4
_tmalloc_small PROC					; COMDAT
; Line 3794
	push	ecx
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _m$[esp+8]
; Line 3798
	mov	ecx, DWORD PTR [ebp+4]
	mov	eax, ecx
	neg	eax
	and	eax, ecx
; Line 3799
	dec	eax
	mov	edx, eax
	shr	edx, 12					; 0000000cH
	and	edx, 16					; 00000010H
	mov	ecx, edx
	shr	eax, cl
	push	edi
	mov	ecx, eax
	shr	ecx, 5
	and	ecx, 8
	shr	eax, cl
	add	edx, ecx
	mov	ecx, eax
	shr	ecx, 2
	and	ecx, 4
	shr	eax, cl
	add	edx, ecx
	mov	ecx, eax
	shr	ecx, 1
	and	ecx, 2
	shr	eax, cl
	add	edx, ecx
	mov	ecx, eax
	shr	ecx, 1
	and	ecx, 1
	shr	eax, cl
; Line 3801
	add	eax, edx
; Line 3802
	mov	edx, DWORD PTR _nb$[esp+12]
	add	eax, ecx
	mov	eax, DWORD PTR [ebp+eax*4+300]
	mov	edi, DWORD PTR [eax+4]
	and	edi, -4					; fffffffcH
	sub	edi, edx
$LN55@tmalloc_sm:
; Line 3801
	mov	ebx, eax
$LL40@tmalloc_sm:
; Line 3804
	mov	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN43@tmalloc_sm
	mov	eax, ecx
	jmp	SHORT $LN44@tmalloc_sm
$LN43@tmalloc_sm:
	mov	eax, DWORD PTR [eax+20]
$LN44@tmalloc_sm:
	test	eax, eax
	je	SHORT $LN39@tmalloc_sm
; Line 3805
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -4					; fffffffcH
	sub	ecx, edx
; Line 3806
	cmp	ecx, edi
	jae	SHORT $LL40@tmalloc_sm
; Line 3807
	mov	edi, ecx
; Line 3810
	jmp	SHORT $LN55@tmalloc_sm
$LN39@tmalloc_sm:
; Line 3812
	mov	ecx, DWORD PTR [ebp+16]
	cmp	ebx, ecx
	jb	$LN36@tmalloc_sm
; Line 3813
	lea	eax, DWORD PTR [ebx+edx]
	mov	DWORD PTR _r$33102[esp+16], eax
; Line 3815
	cmp	ebx, eax
	jae	$LN36@tmalloc_sm
; Line 3816
	mov	eax, DWORD PTR [ebx+24]
	push	esi
	mov	esi, DWORD PTR [ebx+12]
	mov	DWORD PTR _XP$33108[esp+16], eax
	cmp	esi, ebx
	je	SHORT $LN35@tmalloc_sm
	mov	eax, DWORD PTR [ebx+8]
	cmp	eax, ecx
	jb	SHORT $LN26@tmalloc_sm
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [esi+8], eax
	jmp	SHORT $LN25@tmalloc_sm
$LN35@tmalloc_sm:
	mov	esi, DWORD PTR [ebx+20]
	lea	ecx, DWORD PTR [ebx+20]
	test	esi, esi
	jne	SHORT $LL29@tmalloc_sm
	mov	esi, DWORD PTR [ebx+16]
	lea	ecx, DWORD PTR [ebx+16]
	test	esi, esi
	je	SHORT $LN25@tmalloc_sm
$LL29@tmalloc_sm:
	cmp	DWORD PTR [esi+20], 0
	lea	eax, DWORD PTR [esi+20]
	jne	SHORT $LN27@tmalloc_sm
	cmp	DWORD PTR [esi+16], 0
	lea	eax, DWORD PTR [esi+16]
	je	SHORT $LN28@tmalloc_sm
$LN27@tmalloc_sm:
	mov	esi, DWORD PTR [eax]
	mov	ecx, eax
	jmp	SHORT $LL29@tmalloc_sm
$LN28@tmalloc_sm:
	cmp	ecx, DWORD PTR [ebp+16]
	jb	SHORT $LN26@tmalloc_sm
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN25@tmalloc_sm
$LN26@tmalloc_sm:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _nb$[esp+16]
$LN25@tmalloc_sm:
	cmp	DWORD PTR _XP$33108[esp+16], 0
	je	$LN53@tmalloc_sm
	mov	ecx, DWORD PTR [ebx+28]
	cmp	ebx, DWORD PTR [ebp+ecx*4+300]
	lea	eax, DWORD PTR [ebp+ecx*4+300]
	jne	SHORT $LN23@tmalloc_sm
	mov	DWORD PTR [eax], esi
	test	esi, esi
	jne	SHORT $LN52@tmalloc_sm
	mov	ecx, DWORD PTR [ebx+28]
	mov	eax, 1
	shl	eax, cl
	not	eax
	and	DWORD PTR [ebp+4], eax
	jmp	SHORT $LN53@tmalloc_sm
$LN23@tmalloc_sm:
	mov	eax, DWORD PTR _XP$33108[esp+16]
	cmp	eax, DWORD PTR [ebp+16]
	jb	SHORT $LN20@tmalloc_sm
	cmp	DWORD PTR [eax+16], ebx
	jne	SHORT $LN19@tmalloc_sm
	mov	DWORD PTR [eax+16], esi
	jmp	SHORT $LN17@tmalloc_sm
$LN19@tmalloc_sm:
	mov	DWORD PTR [eax+20], esi
	jmp	SHORT $LN17@tmalloc_sm
$LN20@tmalloc_sm:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _nb$[esp+16]
	mov	eax, DWORD PTR _XP$33108[esp+16]
$LN17@tmalloc_sm:
	test	esi, esi
	je	SHORT $LN53@tmalloc_sm
	jmp	SHORT $LN47@tmalloc_sm
$LN52@tmalloc_sm:
	mov	eax, DWORD PTR _XP$33108[esp+16]
$LN47@tmalloc_sm:
	cmp	esi, DWORD PTR [ebp+16]
	jb	SHORT $LN15@tmalloc_sm
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR [ebx+16]
	test	eax, eax
	je	SHORT $LN12@tmalloc_sm
	cmp	eax, DWORD PTR [ebp+16]
	jb	SHORT $LN13@tmalloc_sm
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [eax+24], esi
	jmp	SHORT $LN12@tmalloc_sm
$LN13@tmalloc_sm:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _nb$[esp+16]
$LN12@tmalloc_sm:
	mov	eax, DWORD PTR [ebx+20]
	test	eax, eax
	je	SHORT $LN53@tmalloc_sm
	cmp	eax, DWORD PTR [ebp+16]
	jb	SHORT $LN15@tmalloc_sm
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [eax+24], esi
	jmp	SHORT $LN53@tmalloc_sm
$LN15@tmalloc_sm:
	call	DWORD PTR __imp__abort
	mov	edx, DWORD PTR _nb$[esp+16]
$LN53@tmalloc_sm:
; Line 3817
	cmp	edi, 16					; 00000010H
	jae	SHORT $LN7@tmalloc_sm
; Line 3818
	lea	ecx, DWORD PTR [edi+edx]
	add	edi, ebx
	pop	esi
	lea	eax, DWORD PTR [edi+edx+4]
	or	ecx, 3
	pop	edi
	mov	DWORD PTR [ebx+4], ecx
	or	DWORD PTR [eax], 1
	pop	ebp
; Line 3824
	lea	eax, DWORD PTR [ebx+8]
	pop	ebx
; Line 3830
	pop	ecx
	ret	0
$LN7@tmalloc_sm:
; Line 3821
	mov	eax, DWORD PTR _r$33102[esp+20]
	or	edx, 3
	mov	DWORD PTR [ebx+4], edx
	mov	edx, edi
	or	edx, 1
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+edi], edi
; Line 3822
	mov	eax, DWORD PTR [ebp+8]
	test	eax, eax
	je	SHORT $LN5@tmalloc_sm
	mov	ecx, DWORD PTR [ebp+20]
	shr	eax, 3
	mov	DWORD PTR _DV$33171[esp+16], ecx
	mov	ecx, eax
	mov	edx, 1
	shl	edx, cl
	lea	esi, DWORD PTR [ebp+eax*8+36]
	mov	eax, DWORD PTR [ebp]
	test	eax, edx
	jne	SHORT $LN4@tmalloc_sm
	or	eax, edx
	mov	DWORD PTR [ebp], eax
	jmp	SHORT $LN57@tmalloc_sm
$LN4@tmalloc_sm:
	mov	ecx, DWORD PTR [esi+8]
	cmp	ecx, DWORD PTR [ebp+16]
	jae	SHORT $LN1@tmalloc_sm
	call	DWORD PTR __imp__abort
$LN57@tmalloc_sm:
	mov	ecx, esi
$LN1@tmalloc_sm:
	mov	eax, DWORD PTR _DV$33171[esp+16]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], esi
$LN5@tmalloc_sm:
	mov	edx, DWORD PTR _r$33102[esp+20]
	pop	esi
	mov	DWORD PTR [ebp+8], edi
	pop	edi
	mov	DWORD PTR [ebp+20], edx
	pop	ebp
; Line 3824
	lea	eax, DWORD PTR [ebx+8]
	pop	ebx
; Line 3830
	pop	ecx
	ret	0
$LN36@tmalloc_sm:
; Line 3828
	call	DWORD PTR __imp__abort
	pop	edi
	pop	ebp
; Line 3829
	xor	eax, eax
	pop	ebx
; Line 3830
	pop	ecx
	ret	0
_tmalloc_small ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _dlmalloc
_TEXT	SEGMENT
_DV$33689 = -4						; size = 4
_dlmalloc PROC						; COMDAT
; _bytes$ = eax
; Line 4123
	sub	esp, 8
	push	ebp
	push	esi
; Line 4147
	xor	ebp, ebp
	push	edi
	mov	edi, eax
	cmp	DWORD PTR _mparams+4, ebp
	jne	SHORT $LN36@dlmalloc
	call	_init_mparams
	test	eax, eax
	jne	SHORT $LN37@dlmalloc
$LN36@dlmalloc:
	test	BYTE PTR __gm_+436, 2
	je	SHORT $LN46@dlmalloc
$LN37@dlmalloc:
	mov	esi, OFFSET __gm_+440
	call	_win32_acquire_lock
	cmp	eax, ebp
	jne	$LN33@dlmalloc
$LN46@dlmalloc:
	push	ebx
; Line 4150
	cmp	edi, 244				; 000000f4H
	ja	$LN32@dlmalloc
; Line 4153
	cmp	edi, 11					; 0000000bH
	jae	SHORT $LN39@dlmalloc
	mov	esi, 16					; 00000010H
	jmp	SHORT $LN40@dlmalloc
$LN39@dlmalloc:
	lea	esi, DWORD PTR [edi+11]
	and	esi, -8					; fffffff8H
$LN40@dlmalloc:
; Line 4155
	mov	eax, DWORD PTR __gm_
	mov	edi, esi
	shr	edi, 3
	mov	ecx, edi
	shr	eax, cl
; Line 4157
	test	al, 3
	je	SHORT $LN31@dlmalloc
; Line 4159
	not	eax
	and	eax, 1
	add	edi, eax
; Line 4161
	mov	esi, DWORD PTR __gm_[edi*8+44]
; Line 4163
	mov	ecx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR __gm_[edi*8+36]
	lea	ebx, DWORD PTR [esi+8]
	cmp	eax, ecx
	jne	SHORT $LN30@dlmalloc
	mov	eax, 1
	mov	ecx, edi
	shl	eax, cl
	not	eax
	and	DWORD PTR __gm_, eax
	jmp	SHORT $LN27@dlmalloc
$LN30@dlmalloc:
	cmp	ecx, DWORD PTR __gm_+16
	jb	SHORT $LN28@dlmalloc
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN27@dlmalloc
$LN28@dlmalloc:
	call	DWORD PTR __imp__abort
$LN27@dlmalloc:
; Line 4164
	lea	ecx, DWORD PTR [edi*8]
	or	ecx, 3
	mov	DWORD PTR [esi+4], ecx
	or	DWORD PTR [esi+edi*8+4], 1
; Line 4165
	mov	edi, ebx
	jmp	$postaction$33641
$LN31@dlmalloc:
; Line 4170
	mov	ebx, DWORD PTR __gm_+8
	cmp	esi, ebx
	jbe	$LN43@dlmalloc
; Line 4171
	cmp	eax, ebp
	je	$LN24@dlmalloc
; Line 4175
	or	edx, -1
	mov	ecx, edi
	shl	eax, cl
	shl	edx, cl
	add	edx, edx
	and	eax, edx
	mov	ecx, eax
; Line 4176
	neg	eax
	and	eax, ecx
; Line 4177
	dec	eax
	mov	edx, eax
	shr	edx, 12					; 0000000cH
	and	edx, 16					; 00000010H
	mov	ecx, edx
	shr	eax, cl
	mov	ecx, eax
	shr	ecx, 5
	and	ecx, 8
	shr	eax, cl
	add	edx, ecx
	mov	ecx, eax
	shr	ecx, 2
	and	ecx, 4
	shr	eax, cl
	add	edx, ecx
	mov	ecx, eax
	shr	ecx, 1
	and	ecx, 2
	shr	eax, cl
	add	edx, ecx
	mov	ecx, eax
	shr	ecx, 1
	and	ecx, 1
	shr	eax, cl
	add	eax, edx
	add	eax, ecx
	mov	ecx, eax
; Line 4178
	lea	edi, DWORD PTR [ecx*8]
; Line 4179
	mov	ebp, DWORD PTR __gm_[edi+44]
; Line 4181
	mov	eax, DWORD PTR [ebp+8]
	lea	edx, DWORD PTR __gm_[edi+36]
	lea	ebx, DWORD PTR [ebp+8]
	cmp	edx, eax
	jne	SHORT $LN23@dlmalloc
	mov	eax, 1
	shl	eax, cl
	not	eax
	and	DWORD PTR __gm_, eax
	jmp	SHORT $LN20@dlmalloc
$LN23@dlmalloc:
	cmp	eax, DWORD PTR __gm_+16
	jb	SHORT $LN21@dlmalloc
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [eax+12], edx
	jmp	SHORT $LN20@dlmalloc
$LN21@dlmalloc:
	call	DWORD PTR __imp__abort
$LN20@dlmalloc:
; Line 4182
	sub	edi, esi
; Line 4187
	mov	ecx, esi
	or	ecx, 3
; Line 4188
	add	esi, ebp
; Line 4189
	mov	edx, edi
	mov	DWORD PTR [ebp+4], ecx
	or	edx, 1
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+edi], edi
; Line 4190
	mov	eax, DWORD PTR __gm_+8
	test	eax, eax
	je	SHORT $LN17@dlmalloc
	mov	ecx, DWORD PTR __gm_+20
	shr	eax, 3
	mov	DWORD PTR _DV$33689[esp+24], ecx
	mov	edx, 1
	mov	ecx, eax
	shl	edx, cl
	lea	ebp, DWORD PTR __gm_[eax*8+36]
	test	DWORD PTR __gm_, edx
	jne	SHORT $LN16@dlmalloc
	or	DWORD PTR __gm_, edx
	jmp	SHORT $LN47@dlmalloc
$LN16@dlmalloc:
	mov	ecx, DWORD PTR [ebp+8]
	cmp	ecx, DWORD PTR __gm_+16
	jae	SHORT $LN13@dlmalloc
	call	DWORD PTR __imp__abort
$LN47@dlmalloc:
	mov	ecx, ebp
$LN13@dlmalloc:
	mov	eax, DWORD PTR _DV$33689[esp+24]
	mov	DWORD PTR [ebp+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebp
$LN17@dlmalloc:
	mov	DWORD PTR __gm_+8, edi
	mov	DWORD PTR __gm_+20, esi
; Line 4192
	mov	edi, ebx
	jmp	$postaction$33641
$LN24@dlmalloc:
; Line 4197
	cmp	DWORD PTR __gm_+4, ebp
	je	SHORT $LN45@dlmalloc
	push	esi
	push	OFFSET __gm_
	call	_tmalloc_small
; Line 4201
	jmp	SHORT $LN49@dlmalloc
$LN32@dlmalloc:
; Line 4203
	cmp	edi, -64				; ffffffc0H
	jb	SHORT $LN9@dlmalloc
; Line 4204
	or	esi, -1
; Line 4205
	jmp	SHORT $LN45@dlmalloc
$LN9@dlmalloc:
; Line 4206
	lea	esi, DWORD PTR [edi+11]
	and	esi, -8					; fffffff8H
; Line 4207
	cmp	DWORD PTR __gm_+4, ebp
	je	SHORT $LN45@dlmalloc
	push	esi
	push	OFFSET __gm_
	call	_tmalloc_large
$LN49@dlmalloc:
	mov	edi, eax
	add	esp, 8
	cmp	edi, ebp
	jne	$postaction$33641
$LN45@dlmalloc:
; Line 4213
	mov	ebx, DWORD PTR __gm_+8
	cmp	esi, ebx
	ja	SHORT $LN6@dlmalloc
$LN43@dlmalloc:
; Line 4215
	mov	edx, DWORD PTR __gm_+20
	mov	eax, ebx
	sub	eax, esi
	mov	ecx, edx
; Line 4216
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN5@dlmalloc
; Line 4217
	add	edx, esi
; Line 4219
	mov	edi, eax
	or	edi, 1
	mov	DWORD PTR __gm_+20, edx
	mov	DWORD PTR __gm_+8, eax
	mov	DWORD PTR [edx+4], edi
; Line 4220
	or	esi, 3
	mov	DWORD PTR [edx+eax], eax
	mov	DWORD PTR [ecx+4], esi
; Line 4228
	lea	edi, DWORD PTR [ecx+8]
	jmp	SHORT $postaction$33641
$LN5@dlmalloc:
; Line 4223
	mov	eax, ebx
; Line 4226
	mov	edx, eax
	or	edx, 3
	mov	DWORD PTR __gm_+8, ebp
	mov	DWORD PTR __gm_+20, ebp
	mov	DWORD PTR [ecx+4], edx
	or	DWORD PTR [eax+ecx+4], 1
; Line 4228
	lea	edi, DWORD PTR [ecx+8]
	jmp	SHORT $postaction$33641
$LN6@dlmalloc:
; Line 4233
	mov	eax, DWORD PTR __gm_+12
	cmp	esi, eax
	jae	SHORT $LN2@dlmalloc
; Line 4235
	mov	ecx, DWORD PTR __gm_+24
	sub	eax, esi
	mov	edi, ecx
; Line 4236
	add	ecx, esi
	mov	DWORD PTR __gm_+12, eax
; Line 4237
	or	eax, 1
	mov	DWORD PTR __gm_+24, ecx
; Line 4238
	or	esi, 3
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [edi+4], esi
; Line 4239
	add	edi, 8
; Line 4242
	jmp	SHORT $postaction$33641
$LN2@dlmalloc:
; Line 4245
	push	esi
	mov	eax, OFFSET __gm_
	call	_sys_alloc
	add	esp, 4
	mov	edi, eax
$postaction$33641:
; Line 4248
	test	BYTE PTR __gm_+436, 2
	pop	ebx
	je	SHORT $LN41@dlmalloc
	push	0
	push	OFFSET __gm_+440
	call	DWORD PTR __imp__InterlockedExchange@8
$LN41@dlmalloc:
; Line 4249
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
; Line 4253
	add	esp, 8
	ret	0
$LN33@dlmalloc:
	pop	edi
	pop	esi
; Line 4252
	xor	eax, eax
	pop	ebp
; Line 4253
	add	esp, 8
	ret	0
_dlmalloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _dlfree
_TEXT	SEGMENT
_next$33778 = -8					; size = 4
_psize$33775 = -4					; size = 4
_dlfree	PROC						; COMDAT
; _mem$ = eax
; Line 4255
	sub	esp, 8
; Line 4262
	test	eax, eax
	je	$LN125@dlfree
; Line 4273
	cmp	DWORD PTR _mparams+4, 0
	push	ebp
	push	esi
	lea	ebp, DWORD PTR [eax-8]
	jne	SHORT $LN120@dlfree
	call	_init_mparams
	test	eax, eax
	jne	SHORT $LN121@dlfree
$LN120@dlfree:
	test	BYTE PTR __gm_+436, 2
	je	SHORT $LN135@dlfree
$LN121@dlfree:
	mov	esi, OFFSET __gm_+440
	call	_win32_acquire_lock
	test	eax, eax
	jne	$LN153@dlfree
$LN135@dlfree:
	push	ebx
; Line 4275
	mov	ebx, DWORD PTR __gm_+16
	push	edi
	cmp	ebp, ebx
	jb	$erroraction$33873
	test	BYTE PTR [ebp+4], 2
	je	$erroraction$33873
; Line 4276
	mov	eax, DWORD PTR [ebp+4]
	mov	esi, eax
	and	esi, -4					; fffffffcH
; Line 4277
	lea	ecx, DWORD PTR [esi+ebp]
	mov	DWORD PTR _psize$33775[esp+24], esi
	mov	DWORD PTR _next$33778[esp+24], ecx
; Line 4278
	test	al, 1
	jne	SHORT $LN142@dlfree
; Line 4279
	mov	eax, DWORD PTR [ebp]
; Line 4280
	test	al, 1
	je	SHORT $LN113@dlfree
; Line 4281
	and	eax, -2					; fffffffeH
; Line 4282
	lea	esi, DWORD PTR [esi+eax+16]
; Line 4283
	mov	ecx, ebp
	sub	ecx, eax
	mov	eax, esi
	call	_win32munmap
	test	eax, eax
	jne	$postaction$33790
; Line 4284
	sub	DWORD PTR __gm_+428, esi
; Line 4285
	jmp	$postaction$33790
$LN113@dlfree:
; Line 4288
	mov	edi, ebp
	sub	edi, eax
; Line 4289
	add	esi, eax
	mov	DWORD PTR _psize$33775[esp+24], esi
; Line 4290
	mov	ebp, edi
; Line 4291
	cmp	edi, ebx
	jb	$erroraction$33873
; Line 4292
	cmp	edi, DWORD PTR __gm_+20
	je	$LN109@dlfree
; Line 4293
	shr	eax, 3
	cmp	eax, 32					; 00000020H
	jae	$LN108@dlfree
	mov	edx, DWORD PTR [edi+8]
	mov	edi, DWORD PTR [edi+12]
	cmp	edx, edi
	jne	$LN107@dlfree
	mov	edx, 1
	mov	ecx, eax
	shl	edx, cl
	not	edx
	and	DWORD PTR __gm_, edx
$LN142@dlfree:
; Line 4306
	cmp	ebp, DWORD PTR _next$33778[esp+24]
	jae	$erroraction$33873
	mov	ecx, DWORD PTR _next$33778[esp+24]
	mov	eax, DWORD PTR [ecx+4]
	test	al, 1
	je	$erroraction$33873
; Line 4308
	mov	edx, ecx
	test	al, 2
	jne	$LN68@dlfree
	cmp	edx, DWORD PTR __gm_+24
	jne	$LN67@dlfree
; Line 4309
	mov	eax, DWORD PTR __gm_+12
	add	eax, DWORD PTR _psize$33775[esp+24]
; Line 4310
	mov	DWORD PTR __gm_+24, ebp
	mov	DWORD PTR __gm_+12, eax
	mov	ecx, eax
; Line 4311
	or	eax, 1
	mov	DWORD PTR [ebp+4], eax
; Line 4312
	cmp	ebp, DWORD PTR __gm_+20
	jne	SHORT $LN66@dlfree
; Line 4313
	xor	eax, eax
	mov	DWORD PTR __gm_+20, eax
; Line 4314
	mov	DWORD PTR __gm_+8, eax
$LN66@dlfree:
; Line 4316
	cmp	ecx, DWORD PTR __gm_+28
	jbe	$postaction$33790
; Line 4317
	xor	ecx, ecx
	mov	eax, OFFSET __gm_
	call	_sys_trim
; Line 4318
	jmp	$postaction$33790
$LN107@dlfree:
; Line 4293
	lea	eax, DWORD PTR __gm_[eax*8+36]
	cmp	edx, eax
	je	SHORT $LN104@dlfree
	cmp	edx, ebx
	jb	SHORT $LN105@dlfree
$LN104@dlfree:
	cmp	edi, eax
	je	SHORT $LN103@dlfree
	cmp	edi, ebx
	jae	SHORT $LN103@dlfree
$LN105@dlfree:
	call	DWORD PTR __imp__abort
	jmp	$LN142@dlfree
$LN103@dlfree:
	mov	DWORD PTR [edx+12], edi
	mov	DWORD PTR [edi+8], edx
	jmp	$LN142@dlfree
$LN108@dlfree:
	mov	esi, DWORD PTR [edi+12]
	mov	ebx, DWORD PTR [edi+24]
	cmp	esi, edi
	je	SHORT $LN100@dlfree
	mov	eax, DWORD PTR [edi+8]
	cmp	eax, DWORD PTR __gm_+16
	jb	SHORT $LN91@dlfree
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [esi+8], eax
	jmp	SHORT $LN147@dlfree
$LN100@dlfree:
	mov	esi, DWORD PTR [edi+20]
	lea	ecx, DWORD PTR [edi+20]
	test	esi, esi
	jne	SHORT $LL94@dlfree
	mov	esi, DWORD PTR [edi+16]
	lea	ecx, DWORD PTR [edi+16]
	test	esi, esi
	je	SHORT $LN147@dlfree
	npad	1
$LL94@dlfree:
	cmp	DWORD PTR [esi+20], 0
	lea	eax, DWORD PTR [esi+20]
	jne	SHORT $LN92@dlfree
	cmp	DWORD PTR [esi+16], 0
	lea	eax, DWORD PTR [esi+16]
	je	SHORT $LN93@dlfree
$LN92@dlfree:
	mov	esi, DWORD PTR [eax]
	mov	ecx, eax
	jmp	SHORT $LL94@dlfree
$LN93@dlfree:
	cmp	ecx, DWORD PTR __gm_+16
	jb	SHORT $LN91@dlfree
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN147@dlfree
$LN91@dlfree:
	call	DWORD PTR __imp__abort
$LN147@dlfree:
	test	ebx, ebx
	je	$LN142@dlfree
	mov	eax, DWORD PTR [edi+28]
	cmp	edi, DWORD PTR __gm_[eax*4+300]
	lea	eax, DWORD PTR __gm_[eax*4+300]
	jne	SHORT $LN88@dlfree
	mov	DWORD PTR [eax], esi
	test	esi, esi
	jne	SHORT $LN131@dlfree
	mov	ecx, DWORD PTR [edi+28]
	mov	eax, 1
	shl	eax, cl
	not	eax
	and	DWORD PTR __gm_+4, eax
	jmp	$LN142@dlfree
$LN88@dlfree:
	cmp	ebx, DWORD PTR __gm_+16
	jb	SHORT $LN85@dlfree
	cmp	DWORD PTR [ebx+16], edi
	jne	SHORT $LN84@dlfree
	mov	DWORD PTR [ebx+16], esi
	jmp	SHORT $LN82@dlfree
$LN84@dlfree:
	mov	DWORD PTR [ebx+20], esi
	jmp	SHORT $LN82@dlfree
$LN85@dlfree:
	call	DWORD PTR __imp__abort
$LN82@dlfree:
	test	esi, esi
	je	$LN142@dlfree
$LN131@dlfree:
	cmp	esi, DWORD PTR __gm_+16
	jb	$LN105@dlfree
	mov	DWORD PTR [esi+24], ebx
	mov	eax, DWORD PTR [edi+16]
	test	eax, eax
	je	SHORT $LN77@dlfree
	cmp	eax, DWORD PTR __gm_+16
	jb	SHORT $LN78@dlfree
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [eax+24], esi
	jmp	SHORT $LN77@dlfree
$LN78@dlfree:
	call	DWORD PTR __imp__abort
$LN77@dlfree:
	mov	edi, DWORD PTR [edi+20]
	test	edi, edi
	je	$LN142@dlfree
	cmp	edi, DWORD PTR __gm_+16
	jb	$LN105@dlfree
	mov	DWORD PTR [esi+20], edi
	mov	DWORD PTR [edi+24], esi
	jmp	$LN142@dlfree
$LN109@dlfree:
; Line 4295
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 3
	cmp	dl, 3
	jne	$LN142@dlfree
; Line 4296
	mov	DWORD PTR __gm_+8, esi
; Line 4297
	and	DWORD PTR [ecx+4], -2			; fffffffeH
	mov	eax, esi
	or	eax, 1
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+esi], esi
; Line 4298
	jmp	$postaction$33790
$LN67@dlfree:
; Line 4320
	cmp	edx, DWORD PTR __gm_+20
	jne	SHORT $LN63@dlfree
; Line 4321
	mov	eax, DWORD PTR __gm_+8
	add	eax, DWORD PTR _psize$33775[esp+24]
; Line 4322
	mov	DWORD PTR __gm_+20, ebp
	mov	DWORD PTR __gm_+8, eax
	mov	ecx, eax
; Line 4323
	or	eax, 1
	mov	DWORD PTR [ebp+4], eax
	mov	DWORD PTR [ecx+ebp], ecx
; Line 4324
	jmp	$postaction$33790
$LN63@dlfree:
; Line 4327
	and	eax, -4					; fffffffcH
; Line 4328
	add	DWORD PTR _psize$33775[esp+24], eax
; Line 4329
	mov	ecx, eax
	shr	ecx, 3
	cmp	ecx, 32					; 00000020H
	jae	SHORT $LN61@dlfree
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [edx+12]
	cmp	eax, edx
	jne	SHORT $LN60@dlfree
	mov	edx, 1
	shl	edx, cl
	not	edx
	and	DWORD PTR __gm_, edx
	jmp	$LN26@dlfree
$LN60@dlfree:
	lea	ecx, DWORD PTR __gm_[ecx*8+36]
	cmp	eax, ecx
	je	SHORT $LN148@dlfree
	cmp	eax, DWORD PTR __gm_+16
	jb	$LN33@dlfree
$LN148@dlfree:
	cmp	edx, ecx
	je	SHORT $LN56@dlfree
	cmp	edx, DWORD PTR __gm_+16
	jb	$LN33@dlfree
$LN56@dlfree:
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [edx+8], eax
	jmp	$LN26@dlfree
$LN61@dlfree:
	mov	esi, DWORD PTR [edx+12]
	mov	edi, DWORD PTR [edx+24]
	cmp	esi, edx
	je	SHORT $LN53@dlfree
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __gm_+16
	jb	SHORT $LN44@dlfree
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [esi+8], eax
	jmp	SHORT $LN43@dlfree
$LN53@dlfree:
	mov	esi, DWORD PTR [edx+20]
	lea	ecx, DWORD PTR [edx+20]
	test	esi, esi
	jne	SHORT $LL47@dlfree
	mov	esi, DWORD PTR [edx+16]
	lea	ecx, DWORD PTR [edx+16]
	test	esi, esi
	je	SHORT $LN43@dlfree
$LL47@dlfree:
	cmp	DWORD PTR [esi+20], 0
	lea	eax, DWORD PTR [esi+20]
	jne	SHORT $LN45@dlfree
	cmp	DWORD PTR [esi+16], 0
	lea	eax, DWORD PTR [esi+16]
	je	SHORT $LN46@dlfree
$LN45@dlfree:
	mov	esi, DWORD PTR [eax]
	mov	ecx, eax
	jmp	SHORT $LL47@dlfree
$LN46@dlfree:
	cmp	ecx, DWORD PTR __gm_+16
	jb	SHORT $LN44@dlfree
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN43@dlfree
$LN44@dlfree:
	call	DWORD PTR __imp__abort
$LN43@dlfree:
	test	edi, edi
	je	$LN26@dlfree
	mov	ecx, DWORD PTR _next$33778[esp+24]
	mov	eax, DWORD PTR [ecx+28]
	cmp	ecx, DWORD PTR __gm_[eax*4+300]
	lea	eax, DWORD PTR __gm_[eax*4+300]
	jne	SHORT $LN41@dlfree
	mov	DWORD PTR [eax], esi
	test	esi, esi
	jne	SHORT $LN130@dlfree
	mov	ecx, DWORD PTR [ecx+28]
	mov	eax, 1
	shl	eax, cl
	not	eax
	and	DWORD PTR __gm_+4, eax
	jmp	SHORT $LN26@dlfree
$LN41@dlfree:
	cmp	edi, DWORD PTR __gm_+16
	jb	SHORT $LN38@dlfree
	cmp	DWORD PTR [edi+16], ecx
	jne	SHORT $LN37@dlfree
	mov	DWORD PTR [edi+16], esi
	jmp	SHORT $LN35@dlfree
$LN37@dlfree:
	mov	DWORD PTR [edi+20], esi
	jmp	SHORT $LN35@dlfree
$LN38@dlfree:
	call	DWORD PTR __imp__abort
$LN35@dlfree:
	test	esi, esi
	je	SHORT $LN26@dlfree
	mov	ecx, DWORD PTR _next$33778[esp+24]
$LN130@dlfree:
	cmp	esi, DWORD PTR __gm_+16
	jb	SHORT $LN33@dlfree
	mov	DWORD PTR [esi+24], edi
	mov	eax, DWORD PTR [ecx+16]
	test	eax, eax
	je	SHORT $LN30@dlfree
	cmp	eax, DWORD PTR __gm_+16
	jb	SHORT $LN31@dlfree
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [eax+24], esi
	jmp	SHORT $LN30@dlfree
$LN31@dlfree:
	call	DWORD PTR __imp__abort
	mov	ecx, DWORD PTR _next$33778[esp+24]
$LN30@dlfree:
	mov	eax, DWORD PTR [ecx+20]
	test	eax, eax
	je	SHORT $LN26@dlfree
	cmp	eax, DWORD PTR __gm_+16
	jb	SHORT $LN33@dlfree
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [eax+24], esi
	jmp	SHORT $LN26@dlfree
$LN33@dlfree:
	call	DWORD PTR __imp__abort
$LN26@dlfree:
; Line 4330
	mov	edi, DWORD PTR _psize$33775[esp+24]
	mov	ecx, edi
	or	ecx, 1
	mov	DWORD PTR [ebp+4], ecx
	mov	DWORD PTR [edi+ebp], edi
; Line 4331
	cmp	ebp, DWORD PTR __gm_+20
	jne	SHORT $LN24@dlfree
; Line 4332
	mov	DWORD PTR __gm_+8, edi
; Line 4333
	jmp	$postaction$33790
$LN68@dlfree:
; Line 4338
	and	eax, -2					; fffffffeH
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _psize$33775[esp+24]
	mov	ecx, eax
	or	ecx, 1
	mov	DWORD PTR [ebp+4], ecx
	mov	DWORD PTR [eax+ebp], eax
	mov	edi, eax
$LN24@dlfree:
; Line 4339
	mov	ecx, edi
	shr	ecx, 3
	cmp	ecx, 32					; 00000020H
	jae	SHORT $LN23@dlfree
	mov	eax, 1
	shl	eax, cl
	lea	esi, DWORD PTR __gm_[ecx*8+36]
	mov	edi, esi
	test	DWORD PTR __gm_, eax
	jne	SHORT $LN22@dlfree
	or	DWORD PTR __gm_, eax
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [ebp+8], edi
	mov	DWORD PTR [ebp+12], esi
	jmp	$postaction$33790
$LN22@dlfree:
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, DWORD PTR __gm_+16
	jb	SHORT $LN20@dlfree
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [ebp+8], edi
	mov	DWORD PTR [ebp+12], esi
	jmp	$postaction$33790
$LN20@dlfree:
	call	DWORD PTR __imp__abort
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [ebp+8], edi
	mov	DWORD PTR [ebp+12], esi
	jmp	$postaction$33790
$LN23@dlfree:
	mov	eax, edi
	shr	eax, 8
	xor	ebx, ebx
	cmp	eax, ebx
	jne	SHORT $LN17@dlfree
	xor	ecx, ecx
	jmp	SHORT $LN14@dlfree
$LN17@dlfree:
	cmp	eax, 65535				; 0000ffffH
	jbe	SHORT $LN15@dlfree
	mov	ecx, 31					; 0000001fH
	jmp	SHORT $LN14@dlfree
$LN15@dlfree:
	lea	edx, DWORD PTR [eax-256]
	shr	edx, 16					; 00000010H
	and	edx, 8
	mov	ecx, edx
	shl	eax, cl
	lea	ecx, DWORD PTR [eax-4096]
	shr	ecx, 16					; 00000010H
	and	ecx, 4
	shl	eax, cl
	add	edx, ecx
	lea	ecx, DWORD PTR [eax-16384]
	shr	ecx, 16					; 00000010H
	and	ecx, 2
	shl	eax, cl
	shr	eax, 15					; 0000000fH
	sub	eax, ecx
	sub	eax, edx
	add	eax, 14					; 0000000eH
	lea	ecx, DWORD PTR [eax+7]
	mov	edx, edi
	shr	edx, cl
	and	edx, 1
	lea	ecx, DWORD PTR [edx+eax*2]
$LN14@dlfree:
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR [ebp+28], ecx
	mov	DWORD PTR [ebp+20], ebx
	mov	DWORD PTR [ebp+16], ebx
	lea	edx, DWORD PTR __gm_[ecx*4+300]
	test	DWORD PTR __gm_+4, eax
	jne	SHORT $LN13@dlfree
	or	DWORD PTR __gm_+4, eax
	mov	DWORD PTR [edx], ebp
	mov	DWORD PTR [ebp+24], edx
	mov	DWORD PTR [ebp+12], ebp
	mov	DWORD PTR [ebp+8], ebp
	jmp	$postaction$33790
$LN13@dlfree:
	mov	eax, DWORD PTR [edx]
	cmp	ecx, 31					; 0000001fH
	jne	SHORT $LN123@dlfree
	xor	esi, esi
	jmp	SHORT $LN124@dlfree
$LN123@dlfree:
	shr	ecx, 1
	mov	esi, 25					; 00000019H
	sub	esi, ecx
$LN124@dlfree:
	mov	ecx, esi
	mov	edx, edi
	shl	edx, cl
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -4					; fffffffcH
	cmp	ecx, edi
	je	SHORT $LN9@dlfree
$LL11@dlfree:
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	lea	esi, DWORD PTR [eax+ecx*4+16]
	mov	ecx, DWORD PTR [esi]
	add	edx, edx
	cmp	ecx, ebx
	je	SHORT $LN8@dlfree
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -4					; fffffffcH
	cmp	ecx, edi
	jne	SHORT $LL11@dlfree
$LN9@dlfree:
	mov	edx, DWORD PTR __gm_+16
	mov	ecx, DWORD PTR [eax+8]
	cmp	eax, edx
	jb	SHORT $erroraction$33873
	cmp	ecx, edx
	jb	SHORT $erroraction$33873
	mov	DWORD PTR [ecx+12], ebp
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [ebp+8], ecx
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+24], ebx
	jmp	SHORT $postaction$33790
$LN8@dlfree:
	cmp	esi, DWORD PTR __gm_+16
	jb	SHORT $erroraction$33873
	mov	DWORD PTR [esi], ebp
	mov	DWORD PTR [ebp+24], eax
	mov	DWORD PTR [ebp+12], ebp
	mov	DWORD PTR [ebp+8], ebp
	jmp	SHORT $postaction$33790
$erroraction$33873:
; Line 4345
	call	DWORD PTR __imp__abort
$postaction$33790:
; Line 4347
	test	BYTE PTR __gm_+436, 2
	pop	edi
	pop	ebx
	je	SHORT $LN153@dlfree
	push	0
	push	OFFSET __gm_+440
	call	DWORD PTR __imp__InterlockedExchange@8
$LN153@dlfree:
	pop	esi
	pop	ebp
$LN125@dlfree:
; Line 4353
	add	esp, 8
	ret	0
_dlfree	ENDP
_TEXT	ENDS
PUBLIC	_ffi_closure_alloc
; Function compile flags: /Ogtpy
;	COMDAT _ffi_closure_alloc
_TEXT	SEGMENT
_size$ = 8						; size = 4
_code$ = 12						; size = 4
_ffi_closure_alloc PROC					; COMDAT
; File g:\php-sdk\lib_builds\vc9\x86\libffi-3.0.11\src\closures.c
; Line 537
	push	esi
; Line 540
	mov	esi, DWORD PTR _code$[esp]
	test	esi, esi
	jne	SHORT $LN2@ffi_closur
; Line 541
	xor	eax, eax
	pop	esi
; Line 553
	ret	0
$LN2@ffi_closur:
; Line 543
	mov	eax, DWORD PTR _size$[esp]
	call	_dlmalloc
; Line 545
	test	eax, eax
	je	SHORT $LN3@ffi_closur
; Line 547
	mov	ecx, OFFSET __gm_+444
	push	edi
$LL8@ffi_closur:
	mov	edx, DWORD PTR [ecx]
	cmp	eax, edx
	jb	SHORT $LN6@ffi_closur
	mov	edi, DWORD PTR [ecx+4]
	add	edi, edx
	cmp	eax, edi
	jb	SHORT $LN7@ffi_closur
$LN6@ffi_closur:
	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, ecx
	jne	SHORT $LL8@ffi_closur
$LN7@ffi_closur:
; Line 549
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, eax
	mov	DWORD PTR [esi], ecx
	pop	edi
$LN3@ffi_closur:
	pop	esi
; Line 553
	ret	0
_ffi_closure_alloc ENDP
_TEXT	ENDS
PUBLIC	_ffi_closure_free
; Function compile flags: /Ogtpy
;	COMDAT _ffi_closure_free
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_ffi_closure_free PROC					; COMDAT
; Line 569
	mov	eax, DWORD PTR _ptr$[esp-4]
	jmp	_dlfree
_ffi_closure_free ENDP
_TEXT	ENDS
END
