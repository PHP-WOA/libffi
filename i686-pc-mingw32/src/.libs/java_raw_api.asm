; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	g:\php-sdk\lib_builds\vc9\x86\libffi-3.0.11\src\java_raw_api.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_ffi_java_raw_size
EXTRN	__imp__abort:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ffi_java_raw_size
_TEXT	SEGMENT
_cif$ = 8						; size = 4
_ffi_java_raw_size PROC					; COMDAT
; File g:\php-sdk\lib_builds\vc9\x86\libffi-3.0.11\src\java_raw_api.c
; Line 50
	mov	eax, DWORD PTR _cif$[esp-4]
	push	ebx
	push	esi
; Line 52
	mov	esi, DWORD PTR [eax+4]
	xor	ebx, ebx
	sub	esi, 1
	push	edi
	mov	edi, DWORD PTR [eax+8]
	js	SHORT $LN14@ffi_java_r
	push	ebp
	mov	ebp, DWORD PTR __imp__abort
	npad	5
$LL8@ffi_java_r:
; Line 54
	mov	eax, DWORD PTR [edi]
	movzx	eax, WORD PTR [eax+6]
	add	eax, -3					; fffffffdH
	cmp	eax, 10					; 0000000aH
	ja	SHORT $LN1@ffi_java_r
	movzx	ecx, BYTE PTR $LN13@ffi_java_r[eax]
	jmp	DWORD PTR $LN15@ffi_java_r[ecx*4]
$LN3@ffi_java_r:
; Line 58
	add	ebx, 8
; Line 59
	jmp	SHORT $LN7@ffi_java_r
$LN2@ffi_java_r:
; Line 62
	call	ebp
$LN1@ffi_java_r:
; Line 64
	add	ebx, 4
$LN7@ffi_java_r:
; Line 52
	dec	esi
	add	edi, 4
	test	esi, esi
	jge	SHORT $LL8@ffi_java_r
	pop	ebp
$LN14@ffi_java_r:
	pop	edi
	pop	esi
; Line 68
	mov	eax, ebx
	pop	ebx
; Line 69
	ret	0
	npad	3
$LN15@ffi_java_r:
	DD	$LN3@ffi_java_r
	DD	$LN2@ffi_java_r
	DD	$LN1@ffi_java_r
$LN13@ffi_java_r:
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	0
	DB	1
_ffi_java_raw_size ENDP
_TEXT	ENDS
PUBLIC	_ffi_java_raw_to_ptrarray
; Function compile flags: /Ogtpy
;	COMDAT _ffi_java_raw_to_ptrarray
_TEXT	SEGMENT
_cif$ = 8						; size = 4
_raw$ = 12						; size = 4
_args$ = 16						; size = 4
_ffi_java_raw_to_ptrarray PROC				; COMDAT
; Line 74
	push	ebx
; Line 76
	mov	ebx, DWORD PTR _cif$[esp]
	mov	edx, DWORD PTR [ebx+8]
	push	edi
; Line 80
	xor	edi, edi
	cmp	DWORD PTR [ebx+4], edi
	jbe	SHORT $LN7@ffi_java_r@2
	mov	ecx, DWORD PTR _args$[esp+4]
	mov	eax, DWORD PTR _raw$[esp+4]
	push	esi
	npad	7
$LL9@ffi_java_r@2:
; Line 82
	mov	esi, DWORD PTR [edx]
	movzx	esi, WORD PTR [esi+6]
	add	esi, -5					; fffffffbH
	cmp	esi, 9
	ja	SHORT $LN1@ffi_java_r@2
	movzx	esi, BYTE PTR $LN14@ffi_java_r@2[esi]
	jmp	DWORD PTR $LN15@ffi_java_r@2[esi*4]
$LN4@ffi_java_r@2:
; Line 86
	lea	esi, DWORD PTR [eax+3]
	mov	DWORD PTR [ecx], esi
	add	eax, 4
; Line 87
	jmp	SHORT $LN8@ffi_java_r@2
$LN3@ffi_java_r@2:
; Line 91
	lea	esi, DWORD PTR [eax+2]
	mov	DWORD PTR [ecx], esi
	add	eax, 4
; Line 92
	jmp	SHORT $LN8@ffi_java_r@2
$LN2@ffi_java_r@2:
; Line 104
	mov	DWORD PTR [ecx], eax
	add	eax, 4
; Line 105
	jmp	SHORT $LN8@ffi_java_r@2
$LN1@ffi_java_r@2:
; Line 108
	mov	DWORD PTR [ecx], eax
; Line 110
	mov	esi, DWORD PTR [edx]
	mov	esi, DWORD PTR [esi]
	dec	esi
	or	esi, 3
	inc	esi
	shr	esi, 2
	lea	eax, DWORD PTR [eax+esi*4]
$LN8@ffi_java_r@2:
	inc	edi
	add	edx, 4
	add	ecx, 4
	cmp	edi, DWORD PTR [ebx+4]
	jb	SHORT $LL9@ffi_java_r@2
	pop	esi
$LN7@ffi_java_r@2:
	pop	edi
	pop	ebx
; Line 144
	ret	0
$LN15@ffi_java_r@2:
	DD	$LN4@ffi_java_r@2
	DD	$LN3@ffi_java_r@2
	DD	$LN2@ffi_java_r@2
	DD	$LN1@ffi_java_r@2
$LN14@ffi_java_r@2:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
_ffi_java_raw_to_ptrarray ENDP
_TEXT	ENDS
PUBLIC	_ffi_java_ptrarray_to_raw
EXTRN	__fltused:DWORD
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ffi_java_ptrarray_to_raw
_TEXT	SEGMENT
_cif$ = 8						; size = 4
_args$ = 12						; size = 4
_raw$ = 16						; size = 4
_ffi_java_ptrarray_to_raw PROC				; COMDAT
; Line 150
	mov	edx, DWORD PTR _cif$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [edx+8]
	push	ebp
; Line 152
	xor	ebp, ebp
	cmp	DWORD PTR [edx+4], ebp
	jbe	$LN12@ffi_java_p
	push	esi
	mov	esi, DWORD PTR _raw$[esp+8]
	push	edi
	mov	edi, DWORD PTR _args$[esp+12]
	npad	2
$LL14@ffi_java_p:
; Line 154
	mov	eax, DWORD PTR [ebx]
	movzx	ecx, WORD PTR [eax+6]
	add	ecx, -2					; fffffffeH
	cmp	ecx, 12					; 0000000cH
	ja	SHORT $LN1@ffi_java_p
	jmp	DWORD PTR $LN19@ffi_java_p[ecx*4]
$LN9@ffi_java_p:
; Line 158
	mov	eax, DWORD PTR [edi]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR [esi], ecx
	add	esi, 4
; Line 162
	jmp	SHORT $LN13@ffi_java_p
$LN8@ffi_java_p:
; Line 166
	mov	eax, DWORD PTR [edi]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR [esi], ecx
	add	esi, 4
; Line 170
	jmp	SHORT $LN13@ffi_java_p
$LN7@ffi_java_p:
; Line 174
	mov	eax, DWORD PTR [edi]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR [esi], ecx
	add	esi, 4
; Line 178
	jmp	SHORT $LN13@ffi_java_p
$LN6@ffi_java_p:
; Line 182
	mov	eax, DWORD PTR [edi]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR [esi], ecx
	add	esi, 4
; Line 186
	jmp	SHORT $LN13@ffi_java_p
$LN5@ffi_java_p:
; Line 190
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi], ecx
	add	esi, 4
; Line 194
	jmp	SHORT $LN13@ffi_java_p
$LN3@ffi_java_p:
; Line 205
	mov	eax, DWORD PTR [edi]
	fld	DWORD PTR [eax]
	add	esi, 4
	fstp	DWORD PTR [esi-4]
; Line 206
	jmp	SHORT $LN13@ffi_java_p
$LN2@ffi_java_p:
; Line 218
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [esi], eax
	add	esi, 4
; Line 219
	jmp	SHORT $LN13@ffi_java_p
$LN1@ffi_java_p:
; Line 225
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edi]
	push	ecx
	push	edx
	push	esi
	call	_memcpy
; Line 227
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cif$[esp+24]
	dec	ecx
	or	ecx, 3
	inc	ecx
	add	esp, 12					; 0000000cH
	shr	ecx, 2
	lea	esi, DWORD PTR [esi+ecx*4]
$LN13@ffi_java_p:
	inc	ebp
	add	ebx, 4
	add	edi, 4
	cmp	ebp, DWORD PTR [edx+4]
	jb	$LL14@ffi_java_p
	pop	edi
	pop	esi
$LN12@ffi_java_p:
	pop	ebp
	pop	ebx
; Line 231
	ret	0
	npad	2
$LN19@ffi_java_p:
	DD	$LN3@ffi_java_p
	DD	$LN1@ffi_java_p
	DD	$LN1@ffi_java_p
	DD	$LN9@ffi_java_p
	DD	$LN8@ffi_java_p
	DD	$LN7@ffi_java_p
	DD	$LN6@ffi_java_p
	DD	$LN5@ffi_java_p
	DD	$LN5@ffi_java_p
	DD	$LN1@ffi_java_p
	DD	$LN1@ffi_java_p
	DD	$LN1@ffi_java_p
	DD	$LN2@ffi_java_p
_ffi_java_ptrarray_to_raw ENDP
_TEXT	ENDS
END
