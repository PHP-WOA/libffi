; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	g:\php-sdk\lib_builds\vc9\x86\libffi-3.0.11\src\raw_api.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_ffi_raw_size
; Function compile flags: /Ogtpy
;	COMDAT _ffi_raw_size
_TEXT	SEGMENT
_cif$ = 8						; size = 4
_ffi_raw_size PROC					; COMDAT
; File g:\php-sdk\lib_builds\vc9\x86\libffi-3.0.11\src\raw_api.c
; Line 40
	mov	ecx, DWORD PTR _cif$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx+8]
; Line 42
	mov	ecx, DWORD PTR [ecx+4]
	xor	eax, eax
	sub	ecx, 1
	js	SHORT $LN3@ffi_raw_si
$LL5@ffi_raw_si:
; Line 45
	mov	edx, DWORD PTR [esi]
	cmp	WORD PTR [edx+6], 13			; 0000000dH
	jne	SHORT $LN2@ffi_raw_si
; Line 46
	add	eax, 4
; Line 47
	jmp	SHORT $LN4@ffi_raw_si
$LN2@ffi_raw_si:
; Line 49
	mov	edx, DWORD PTR [edx]
	dec	edx
	or	edx, 3
	lea	eax, DWORD PTR [eax+edx+1]
$LN4@ffi_raw_si:
	dec	ecx
	add	esi, 4
	test	ecx, ecx
	jge	SHORT $LL5@ffi_raw_si
$LN3@ffi_raw_si:
	pop	esi
; Line 53
	ret	0
_ffi_raw_size ENDP
_TEXT	ENDS
PUBLIC	_ffi_raw_to_ptrarray
; Function compile flags: /Ogtpy
;	COMDAT _ffi_raw_to_ptrarray
_TEXT	SEGMENT
_cif$ = 8						; size = 4
_raw$ = 12						; size = 4
_args$ = 16						; size = 4
_ffi_raw_to_ptrarray PROC				; COMDAT
; Line 58
	push	ebx
; Line 60
	mov	ebx, DWORD PTR _cif$[esp]
	push	esi
	mov	esi, DWORD PTR [ebx+8]
	push	edi
; Line 64
	xor	edi, edi
	cmp	DWORD PTR [ebx+4], edi
	jbe	SHORT $LN9@ffi_raw_to
	mov	ecx, DWORD PTR _args$[esp+8]
	mov	eax, DWORD PTR _raw$[esp+8]
	npad	7
$LL11@ffi_raw_to:
; Line 66
	mov	edx, DWORD PTR [esi]
	movzx	edx, WORD PTR [edx+6]
	add	edx, -5					; fffffffbH
	cmp	edx, 9
	ja	SHORT $LN1@ffi_raw_to
	jmp	DWORD PTR $LN16@ffi_raw_to[edx*4]
$LN6@ffi_raw_to:
; Line 70
	lea	edx, DWORD PTR [eax+3]
	mov	DWORD PTR [ecx], edx
	add	eax, 4
; Line 71
	jmp	SHORT $LN10@ffi_raw_to
$LN5@ffi_raw_to:
; Line 75
	lea	edx, DWORD PTR [eax+2]
	mov	DWORD PTR [ecx], edx
	add	eax, 4
; Line 76
	jmp	SHORT $LN10@ffi_raw_to
$LN4@ffi_raw_to:
; Line 81
	mov	DWORD PTR [ecx], eax
	add	eax, 4
; Line 82
	jmp	SHORT $LN10@ffi_raw_to
$LN3@ffi_raw_to:
; Line 87
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	add	eax, 4
; Line 88
	jmp	SHORT $LN10@ffi_raw_to
$LN1@ffi_raw_to:
; Line 96
	mov	DWORD PTR [ecx], eax
; Line 97
	mov	edx, DWORD PTR [esi]
	mov	edx, DWORD PTR [edx]
	dec	edx
	or	edx, 3
	inc	edx
	shr	edx, 2
	lea	eax, DWORD PTR [eax+edx*4]
$LN10@ffi_raw_to:
	inc	edi
	add	esi, 4
	add	ecx, 4
	cmp	edi, DWORD PTR [ebx+4]
	jb	SHORT $LL11@ffi_raw_to
$LN9@ffi_raw_to:
	pop	edi
	pop	esi
	pop	ebx
; Line 126
	ret	0
	npad	2
$LN16@ffi_raw_to:
	DD	$LN6@ffi_raw_to
	DD	$LN6@ffi_raw_to
	DD	$LN5@ffi_raw_to
	DD	$LN5@ffi_raw_to
	DD	$LN4@ffi_raw_to
	DD	$LN4@ffi_raw_to
	DD	$LN1@ffi_raw_to
	DD	$LN1@ffi_raw_to
	DD	$LN3@ffi_raw_to
	DD	$LN4@ffi_raw_to
_ffi_raw_to_ptrarray ENDP
_TEXT	ENDS
PUBLIC	_ffi_ptrarray_to_raw
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ffi_ptrarray_to_raw
_TEXT	SEGMENT
_cif$ = 8						; size = 4
_args$ = 12						; size = 4
_raw$ = 16						; size = 4
_ffi_ptrarray_to_raw PROC				; COMDAT
; Line 132
	mov	edx, DWORD PTR _cif$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [edx+8]
	push	ebp
; Line 134
	xor	ebp, ebp
	cmp	DWORD PTR [edx+4], ebp
	jbe	$LN12@ffi_ptrarr
	push	esi
	mov	esi, DWORD PTR _raw$[esp+8]
	push	edi
	mov	edi, DWORD PTR _args$[esp+12]
	npad	2
$LL14@ffi_ptrarr:
; Line 136
	mov	eax, DWORD PTR [ebx]
	movzx	ecx, WORD PTR [eax+6]
	add	ecx, -5					; fffffffbH
	cmp	ecx, 9
	ja	SHORT $LN1@ffi_ptrarr
	jmp	DWORD PTR $LN19@ffi_ptrarr[ecx*4]
$LN9@ffi_ptrarr:
; Line 139
	mov	eax, DWORD PTR [edi]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR [esi], ecx
	add	esi, 4
; Line 140
	jmp	SHORT $LN13@ffi_ptrarr
$LN8@ffi_ptrarr:
; Line 143
	mov	eax, DWORD PTR [edi]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR [esi], ecx
	add	esi, 4
; Line 144
	jmp	SHORT $LN13@ffi_ptrarr
$LN7@ffi_ptrarr:
; Line 147
	mov	eax, DWORD PTR [edi]
	movzx	ecx, WORD PTR [eax]
	mov	DWORD PTR [esi], ecx
	add	esi, 4
; Line 148
	jmp	SHORT $LN13@ffi_ptrarr
$LN6@ffi_ptrarr:
; Line 151
	mov	eax, DWORD PTR [edi]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR [esi], ecx
	add	esi, 4
; Line 152
	jmp	SHORT $LN13@ffi_ptrarr
$LN5@ffi_ptrarr:
; Line 156
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi], ecx
	add	esi, 4
; Line 157
	jmp	SHORT $LN13@ffi_ptrarr
$LN3@ffi_ptrarr:
; Line 166
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	add	esi, 4
; Line 167
	jmp	SHORT $LN13@ffi_ptrarr
$LN2@ffi_ptrarr:
; Line 171
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [esi], eax
	add	esi, 4
; Line 172
	jmp	SHORT $LN13@ffi_ptrarr
$LN1@ffi_ptrarr:
; Line 175
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edi]
	push	ecx
	push	edx
	push	esi
	call	_memcpy
; Line 176
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cif$[esp+24]
	dec	ecx
	or	ecx, 3
	inc	ecx
	add	esp, 12					; 0000000cH
	shr	ecx, 2
	lea	esi, DWORD PTR [esi+ecx*4]
$LN13@ffi_ptrarr:
	inc	ebp
	add	ebx, 4
	add	edi, 4
	cmp	ebp, DWORD PTR [edx+4]
	jb	$LL14@ffi_ptrarr
	pop	edi
	pop	esi
$LN12@ffi_ptrarr:
	pop	ebp
	pop	ebx
; Line 179
	ret	0
	npad	1
$LN19@ffi_ptrarr:
	DD	$LN9@ffi_ptrarr
	DD	$LN8@ffi_ptrarr
	DD	$LN7@ffi_ptrarr
	DD	$LN6@ffi_ptrarr
	DD	$LN5@ffi_ptrarr
	DD	$LN5@ffi_ptrarr
	DD	$LN1@ffi_ptrarr
	DD	$LN1@ffi_ptrarr
	DD	$LN3@ffi_ptrarr
	DD	$LN2@ffi_ptrarr
_ffi_ptrarray_to_raw ENDP
_TEXT	ENDS
PUBLIC	_ffi_prep_raw_closure
EXTRN	_ffi_prep_raw_closure_loc:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ffi_prep_raw_closure
_TEXT	SEGMENT
_cl$ = 8						; size = 4
_cif$ = 12						; size = 4
_fun$ = 16						; size = 4
_user_data$ = 20					; size = 4
_ffi_prep_raw_closure PROC				; COMDAT
; Line 249
	mov	eax, DWORD PTR _cl$[esp-4]
	mov	ecx, DWORD PTR _user_data$[esp-4]
	mov	edx, DWORD PTR _fun$[esp-4]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _cif$[esp+4]
	push	edx
	push	ecx
	push	eax
	call	_ffi_prep_raw_closure_loc
	add	esp, 20					; 00000014H
; Line 250
	ret	0
_ffi_prep_raw_closure ENDP
_TEXT	ENDS
END
