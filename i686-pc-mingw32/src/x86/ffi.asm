; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	g:\php-sdk\lib_builds\vc9\x86\libffi-3.0.11\src\x86\ffi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	_ffi_prep_args
EXTRN	__imp__memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__alloca_probe_16:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ffi_prep_args
_TEXT	SEGMENT
_p_stack_args$ = -40					; size = 8
_p_argv$ = -32						; size = 4
_p_stack_data$ = -28					; size = 8
_i$ = -20						; size = 4
tv334 = -16						; size = 4
_cabi$ = -16						; size = 4
_stack_args_count$ = -12				; size = 4
_h$3352 = -8						; size = 4
_p_arg$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_stack$ = 8						; size = 4
_ecif$ = 12						; size = 4
_ffi_prep_args PROC					; COMDAT
; File g:\php-sdk\lib_builds\vc9\x86\libffi-3.0.11\src\x86\ffi.c
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
; Line 59
	mov	ebx, DWORD PTR _stack$[ebp]
	push	esi
	mov	esi, DWORD PTR _ecif$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
; Line 67
	mov	eax, DWORD PTR [eax+20]
	push	edi
	mov	DWORD PTR _stack_args_count$[ebp], 0
	mov	DWORD PTR _cabi$[ebp], ecx
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN27@ffi_prep_a
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN34@ffi_prep_a
$LN27@ffi_prep_a:
; Line 69
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ebx], eax
; Line 73
	cmp	ecx, 3
	je	SHORT $LN25@ffi_prep_a
	cmp	ecx, 4
	jne	SHORT $LN33@ffi_prep_a
$LN25@ffi_prep_a:
; Line 76
	mov	edi, ebx
	mov	DWORD PTR _p_stack_args$[ebp], 4
	mov	DWORD PTR _p_stack_data$[ebp], edi
; Line 77
	mov	DWORD PTR _stack_args_count$[ebp], 1
; Line 80
	add	ebx, 4
	jmp	SHORT $LN28@ffi_prep_a
$LN33@ffi_prep_a:
; Line 77
	mov	edi, DWORD PTR _p_stack_data$[ebp]
; Line 80
	add	ebx, 4
	jmp	SHORT $LN28@ffi_prep_a
$LN34@ffi_prep_a:
	mov	edi, DWORD PTR _p_stack_data$[ebp]
$LN28@ffi_prep_a:
; Line 83
	mov	ecx, DWORD PTR [esi+8]
; Line 87
	mov	esi, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR _p_argv$[ebp], ecx
	mov	DWORD PTR _i$[ebp], edx
	mov	DWORD PTR _p_arg$[ebp], eax
	test	edx, edx
	je	$LN22@ffi_prep_a
$LN24@ffi_prep_a:
; Line 92
	test	bl, 3
	je	SHORT $LN21@ffi_prep_a
; Line 93
	dec	ebx
	or	ebx, 3
	inc	ebx
$LN21@ffi_prep_a:
; Line 95
	mov	eax, DWORD PTR _p_arg$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax]
; Line 114
	cmp	esi, 4
	jae	SHORT $LN20@ffi_prep_a
; Line 117
	movzx	eax, WORD PTR [eax+6]
	add	eax, -5					; fffffffbH
	mov	esi, 4
	cmp	eax, 8
	ja	SHORT $LN9@ffi_prep_a
	jmp	DWORD PTR $LN40@ffi_prep_a[eax*4]
$LN17@ffi_prep_a:
; Line 120
	mov	eax, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [eax]
	mov	DWORD PTR [ebx], eax
; Line 121
	jmp	SHORT $LN9@ffi_prep_a
$LN16@ffi_prep_a:
; Line 124
	mov	eax, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [eax]
	mov	DWORD PTR [ebx], eax
; Line 125
	jmp	SHORT $LN9@ffi_prep_a
$LN15@ffi_prep_a:
; Line 128
	mov	eax, DWORD PTR [ecx]
	movsx	eax, WORD PTR [eax]
	mov	DWORD PTR [ebx], eax
; Line 129
	jmp	SHORT $LN9@ffi_prep_a
$LN14@ffi_prep_a:
; Line 132
	mov	eax, DWORD PTR [ecx]
	movzx	eax, WORD PTR [eax]
	mov	DWORD PTR [ebx], eax
; Line 133
	jmp	SHORT $LN9@ffi_prep_a
$LN11@ffi_prep_a:
; Line 144
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx], eax
; Line 151
	jmp	SHORT $LN9@ffi_prep_a
$LN20@ffi_prep_a:
; Line 153
	mov	ecx, DWORD PTR [ecx]
	push	esi
	push	ecx
	push	ebx
	call	_memcpy
	mov	ecx, DWORD PTR _p_argv$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	add	esp, 12					; 0000000cH
$LN9@ffi_prep_a:
; Line 161
	mov	eax, DWORD PTR _cabi$[ebp]
	cmp	eax, 3
	jne	SHORT $LN6@ffi_prep_a
	mov	edi, DWORD PTR _stack_args_count$[ebp]
	cmp	edi, 1
	jl	SHORT $LN7@ffi_prep_a
	jmp	SHORT $LN5@ffi_prep_a
$LN6@ffi_prep_a:
	cmp	eax, 4
	jne	SHORT $LN5@ffi_prep_a
	cmp	DWORD PTR _stack_args_count$[ebp], 2
	jge	SHORT $LN5@ffi_prep_a
	mov	edi, DWORD PTR _stack_args_count$[ebp]
$LN7@ffi_prep_a:
; Line 165
	cmp	esi, 4
	ja	SHORT $LN5@ffi_prep_a
	mov	eax, DWORD PTR _p_arg$[ebp]
	mov	eax, DWORD PTR [eax]
	movzx	eax, WORD PTR [eax+6]
	cmp	ax, 2
	je	SHORT $LN5@ffi_prep_a
	cmp	ax, 13					; 0000000dH
	je	SHORT $LN5@ffi_prep_a
; Line 167
	mov	DWORD PTR _p_stack_args$[ebp+edi*4], esi
; Line 168
	mov	DWORD PTR _p_stack_data$[ebp+edi*4], ebx
; Line 169
	inc	edi
	mov	DWORD PTR _stack_args_count$[ebp], edi
$LN5@ffi_prep_a:
	add	DWORD PTR _p_arg$[ebp], 4
	dec	edx
; Line 173
	add	ecx, 4
; Line 177
	add	ebx, esi
	mov	DWORD PTR _p_argv$[ebp], ecx
	mov	DWORD PTR _i$[ebp], edx
	test	edx, edx
	jne	$LN24@ffi_prep_a
; Line 87
	mov	edi, DWORD PTR _p_stack_data$[ebp]
$LN22@ffi_prep_a:
; Line 185
	mov	eax, DWORD PTR _stack_args_count$[ebp]
	test	eax, eax
	jle	$LN1@ffi_prep_a
; Line 187
	mov	esi, DWORD PTR _p_stack_args$[ebp]
	add	esi, 3
	and	esi, -4					; fffffffcH
; Line 191
	cmp	edi, DWORD PTR _stack$[ebp]
	je	SHORT $LN3@ffi_prep_a
; Line 193
	lea	eax, DWORD PTR [esi+1]
	call	__alloca_probe_16
	mov	eax, esp
; Line 194
	push	esi
	push	edi
	push	eax
	mov	DWORD PTR _h$3352[ebp], eax
	call	_memcpy
; Line 196
	mov	ebx, DWORD PTR _stack$[ebp]
	sub	edi, ebx
	push	edi
	lea	ecx, DWORD PTR [esi+ebx]
	push	ebx
	push	ecx
	call	DWORD PTR __imp__memmove
; Line 197
	mov	edx, DWORD PTR _h$3352[ebp]
	push	esi
	push	edx
	push	ebx
	call	_memcpy
	mov	eax, DWORD PTR _stack_args_count$[ebp]
	add	esp, 36					; 00000024H
$LN3@ffi_prep_a:
; Line 200
	mov	ecx, DWORD PTR _stack$[ebp]
; Line 201
	dec	eax
	lea	ebx, DWORD PTR [esi+ecx]
; Line 202
	cmp	esi, 4
; Line 207
	ja	SHORT $LN1@ffi_prep_a
	test	eax, eax
	jle	SHORT $LN1@ffi_prep_a
	mov	edi, DWORD PTR _p_stack_data$[ebp+4]
	cmp	edi, ebx
	je	SHORT $LN1@ffi_prep_a
; Line 210
	mov	esi, DWORD PTR _p_stack_args$[ebp+4]
	add	esi, 3
	and	esi, -4					; fffffffcH
; Line 211
	lea	eax, DWORD PTR [esi+1]
	mov	DWORD PTR tv334[ebp], eax
	call	__alloca_probe_16
; Line 212
	mov	eax, DWORD PTR tv334[ebp]
	call	__alloca_probe_16
	mov	eax, esp
; Line 213
	push	esi
	push	edi
	push	eax
	mov	DWORD PTR _h$3352[ebp], eax
	call	_memcpy
; Line 214
	sub	edi, ebx
	push	edi
	lea	edx, DWORD PTR [esi+ebx]
	push	ebx
	push	edx
	call	DWORD PTR __imp__memmove
; Line 215
	mov	eax, DWORD PTR _h$3352[ebp]
	push	esi
	push	eax
	push	ebx
	call	_memcpy
	add	esp, 36					; 00000024H
$LN1@ffi_prep_a:
; Line 220
	lea	esp, DWORD PTR [ebp-52]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN40@ffi_prep_a:
	DD	$LN16@ffi_prep_a
	DD	$LN17@ffi_prep_a
	DD	$LN14@ffi_prep_a
	DD	$LN15@ffi_prep_a
	DD	$LN11@ffi_prep_a
	DD	$LN11@ffi_prep_a
	DD	$LN9@ffi_prep_a
	DD	$LN9@ffi_prep_a
	DD	$LN11@ffi_prep_a
_ffi_prep_args ENDP
_TEXT	ENDS
PUBLIC	_ffi_prep_cif_machdep
; Function compile flags: /Ogtpy
;	COMDAT _ffi_prep_cif_machdep
_TEXT	SEGMENT
_cif$ = 8						; size = 4
_ffi_prep_cif_machdep PROC				; COMDAT
; Line 229
	mov	eax, DWORD PTR _cif$[esp-4]
	mov	edx, DWORD PTR [eax+12]
	movzx	ecx, WORD PTR [edx+6]
	push	esi
	push	edi
	cmp	ecx, 13					; 0000000dH
	ja	SHORT $LN5@ffi_prep_c
	movzx	esi, BYTE PTR $LN25@ffi_prep_c[ecx]
	jmp	DWORD PTR $LN27@ffi_prep_c[esi*4]
$LN18@ffi_prep_c:
; Line 248
	mov	DWORD PTR [eax+20], ecx
; Line 249
	jmp	SHORT $LN19@ffi_prep_c
$LN16@ffi_prep_c:
; Line 260
	mov	edx, DWORD PTR [edx]
	cmp	edx, 1
	jne	SHORT $LN15@ffi_prep_c
; Line 262
	mov	DWORD PTR [eax+20], 15			; 0000000fH
	jmp	SHORT $LN19@ffi_prep_c
$LN15@ffi_prep_c:
; Line 264
	cmp	edx, 2
	jne	SHORT $LN13@ffi_prep_c
; Line 266
	mov	DWORD PTR [eax+20], 16			; 00000010H
	jmp	SHORT $LN19@ffi_prep_c
$LN13@ffi_prep_c:
; Line 268
	cmp	edx, 4
; Line 273
	je	SHORT $LN5@ffi_prep_c
; Line 276
	cmp	edx, 8
	jne	SHORT $LN9@ffi_prep_c
$LN17@ffi_prep_c:
; Line 278
	mov	DWORD PTR [eax+20], 12			; 0000000cH
; Line 280
	jmp	SHORT $LN19@ffi_prep_c
$LN9@ffi_prep_c:
; Line 284
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 5
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -5					; fffffffbH
	add	ecx, 18					; 00000012H
; Line 290
	add	DWORD PTR [eax+16], 4
	mov	DWORD PTR [eax+20], ecx
; Line 292
	jmp	SHORT $LN19@ffi_prep_c
$LN5@ffi_prep_c:
; Line 301
	mov	DWORD PTR [eax+20], 1
$LN19@ffi_prep_c:
; Line 306
	mov	edi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+8]
	test	edi, edi
	jbe	SHORT $LN26@ffi_prep_c
	npad	1
$LL4@ffi_prep_c:
; Line 308
	mov	edx, DWORD PTR [ecx]
	movzx	edx, WORD PTR [edx+4]
	mov	esi, DWORD PTR [eax+16]
	dec	edx
	test	edx, esi
	je	SHORT $LN1@ffi_prep_c
; Line 309
	dec	esi
	or	esi, edx
	inc	esi
	mov	DWORD PTR [eax+16], esi
$LN1@ffi_prep_c:
; Line 310
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx]
	dec	edx
	or	edx, 3
	inc	edx
	add	DWORD PTR [eax+16], edx
	dec	edi
	add	ecx, 4
	test	edi, edi
	ja	SHORT $LL4@ffi_prep_c
$LN26@ffi_prep_c:
	pop	edi
; Line 322
	xor	eax, eax
	pop	esi
; Line 323
	ret	0
	npad	2
$LN27@ffi_prep_c:
	DD	$LN18@ffi_prep_c
	DD	$LN17@ffi_prep_c
	DD	$LN16@ffi_prep_c
	DD	$LN5@ffi_prep_c
$LN25@ffi_prep_c:
	DB	0
	DB	3
	DB	0
	DB	0
	DB	3
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	1
	DB	0
	DB	2
_ffi_prep_cif_machdep ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ffi_call
EXTRN	_ffi_call_win32:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ffi_call
_TEXT	SEGMENT
_ecif$ = -20						; size = 12
_abi$3427 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_cif$ = 8						; size = 4
_fn$ = 12						; size = 4
_rvalue$ = 16						; size = 4
_avalue$ = 20						; size = 4
_ffi_call PROC						; COMDAT
; Line 339
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 359
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	eax, DWORD PTR _avalue$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _cif$[ebp]
	push	edi
	mov	DWORD PTR _ecif$[ebp], esi
	mov	DWORD PTR _ecif$[ebp+8], eax
	test	ecx, ecx
	jne	SHORT $LN18@ffi_call
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN17@ffi_call
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN18@ffi_call
$LN17@ffi_call:
; Line 361
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [ecx]
	call	__alloca_probe_16
	mov	DWORD PTR _ecif$[ebp+4], esp
; Line 364
	jmp	SHORT $LN16@ffi_call
$LN18@ffi_call:
; Line 365
	mov	DWORD PTR _ecif$[ebp+4], ecx
$LN16@ffi_call:
; Line 368
	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR [eax-1]
	cmp	ecx, 4
	ja	$LN1@ffi_call
	jmp	DWORD PTR $LN30@ffi_call[ecx*4]
$LN13@ffi_call:
; Line 380
	mov	edx, DWORD PTR _fn$[ebp]
	mov	ecx, DWORD PTR _ecif$[ebp+4]
	push	edx
	mov	edx, DWORD PTR [esi+20]
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	push	edx
	push	ecx
	push	eax
; Line 381
	jmp	$LN29@ffi_call
$LN12@ffi_call:
; Line 386
	xor	edi, edi
; Line 388
	cmp	DWORD PTR [esi+20], 13			; 0000000dH
	mov	DWORD PTR _abi$3427[ebp], eax
	jne	SHORT $LN11@ffi_call
; Line 389
	mov	edi, 1
$LN11@ffi_call:
	mov	ebx, DWORD PTR [esi+4]
; Line 391
	xor	edx, edx
	test	ebx, ebx
	jbe	SHORT $LN8@ffi_call
$LN10@ffi_call:
	cmp	edi, 2
	jae	SHORT $LN3@ffi_call
; Line 396
	mov	eax, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [eax+edx*4]
	movzx	ecx, WORD PTR [eax+6]
	cmp	cx, 2
	je	SHORT $LN9@ffi_call
	cmp	cx, 13					; 0000000dH
	je	SHORT $LN9@ffi_call
; Line 398
	mov	eax, DWORD PTR [eax]
	add	eax, 3
	and	eax, -4					; fffffffcH
; Line 399
	je	SHORT $LN9@ffi_call
	cmp	eax, 4
	ja	SHORT $LN9@ffi_call
; Line 401
	inc	edi
$LN9@ffi_call:
; Line 391
	inc	edx
	cmp	edx, ebx
	jb	SHORT $LN10@ffi_call
$LN8@ffi_call:
; Line 403
	cmp	edi, 2
	jae	SHORT $LN3@ffi_call
	cmp	DWORD PTR _abi$3427[ebp], 4
	jne	SHORT $LN3@ffi_call
; Line 404
	mov	DWORD PTR _abi$3427[ebp], 3
$LN3@ffi_call:
; Line 405
	cmp	edi, 1
	jae	SHORT $LN2@ffi_call
	cmp	DWORD PTR _abi$3427[ebp], 3
	jne	SHORT $LN2@ffi_call
; Line 406
	mov	DWORD PTR _abi$3427[ebp], 2
$LN2@ffi_call:
; Line 408
	mov	ecx, DWORD PTR _fn$[ebp]
	mov	edx, DWORD PTR _ecif$[ebp+4]
	mov	eax, DWORD PTR [esi+20]
	push	ecx
	mov	ecx, DWORD PTR _abi$3427[ebp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [esi+16]
	push	eax
	push	ecx
$LN29@ffi_call:
	lea	edx, DWORD PTR _ecif$[ebp]
	push	edx
	push	OFFSET _ffi_prep_args
	call	_ffi_call_win32
	add	esp, 28					; 0000001cH
$LN1@ffi_call:
; Line 421
	lea	esp, DWORD PTR [ebp-32]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN30@ffi_call:
	DD	$LN13@ffi_call
	DD	$LN13@ffi_call
	DD	$LN12@ffi_call
	DD	$LN12@ffi_call
	DD	$LN13@ffi_call
_ffi_call ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ffi_prep_incoming_args_SYSV
_TEXT	SEGMENT
_rvalue$ = 8						; size = 4
_avalue$ = 12						; size = 4
_ffi_prep_incoming_args_SYSV PROC			; COMDAT
; _stack$ = eax
; _cif$ = edx
; Line 525
	mov	ecx, DWORD PTR [edx+20]
	push	esi
	push	edi
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN5@ffi_prep_i
	cmp	ecx, 18					; 00000012H
	jne	SHORT $LN6@ffi_prep_i
$LN5@ffi_prep_i:
; Line 526
	mov	ecx, DWORD PTR [eax]
	mov	esi, DWORD PTR _rvalue$[esp+4]
	mov	DWORD PTR [esi], ecx
; Line 527
	add	eax, 4
$LN6@ffi_prep_i:
; Line 533
	mov	ecx, DWORD PTR [edx+4]
	mov	esi, DWORD PTR _avalue$[esp+4]
	mov	edi, DWORD PTR [edx+8]
	test	ecx, ecx
	je	SHORT $LN2@ffi_prep_i
$LL4@ffi_prep_i:
; Line 538
	test	al, 3
	je	SHORT $LN1@ffi_prep_i
; Line 539
	dec	eax
	or	eax, 3
	inc	eax
$LN1@ffi_prep_i:
; Line 554
	mov	edx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx]
; Line 558
	mov	DWORD PTR [esi], eax
	dec	ecx
; Line 561
	add	esi, 4
; Line 565
	add	eax, edx
	add	edi, 4
	test	ecx, ecx
	jne	SHORT $LL4@ffi_prep_i
$LN2@ffi_prep_i:
	pop	edi
	pop	esi
; Line 570
	ret	0
_ffi_prep_incoming_args_SYSV ENDP
_TEXT	ENDS
PUBLIC	_ffi_prep_closure_loc
EXTRN	_ffi_closure_SYSV:PROC
EXTRN	_ffi_closure_STDCALL:PROC
EXTRN	_ffi_closure_THISCALL:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ffi_prep_closure_loc
_TEXT	SEGMENT
_closure$ = 8						; size = 4
_cif$ = 12						; size = 4
_fun$ = 16						; size = 4
_user_data$ = 20					; size = 4
_codeloc$ = 24						; size = 4
_ffi_prep_closure_loc PROC				; COMDAT
; Line 652
	push	esi
; Line 665
	mov	esi, DWORD PTR _cif$[esp]
	mov	eax, DWORD PTR [esi]
	push	edi
	cmp	eax, 1
; Line 669
	je	$LN11@ffi_prep_c@2
; Line 672
	cmp	eax, 3
	jne	$LN6@ffi_prep_c@2
; Line 677
	movzx	ecx, WORD PTR [esi+16]
	mov	eax, DWORD PTR _closure$[esp+4]
	movzx	edi, cx
	mov	DWORD PTR [eax+14], edi
	mov	edi, 2932				; 00000b74H
	mov	WORD PTR [eax+26], di
	mov	dl, 184					; 000000b8H
	mov	edi, 62837				; 0000f575H
	mov	WORD PTR [eax+37], di
	mov	BYTE PTR [eax+13], dl
	mov	BYTE PTR [eax+39], dl
	mov	edx, DWORD PTR _codeloc$[esp+4]
	mov	edi, OFFSET _ffi_closure_THISCALL
	sub	edi, edx
	sub	edi, 49					; 00000031H
	add	ecx, 8
	mov	DWORD PTR [eax], -2094791541		; 8324048bH
	mov	DWORD PTR [eax+4], 1284050156		; 4c890cecH
	mov	DWORD PTR [eax+8], 76088356		; 04890424H
	mov	BYTE PTR [eax+12], 36			; 00000024H
	mov	DWORD PTR [eax+18], 136596621		; 08244c8dH
	mov	DWORD PTR [eax+22], 1208150209		; 4802e8c1H
	mov	DWORD PTR [eax+28], -1995943541		; 8908518bH
	mov	DWORD PTR [eax+32], 79790865		; 04c18311H
	mov	BYTE PTR [eax+36], 72			; 00000048H
	mov	DWORD PTR [eax+40], edx
	mov	BYTE PTR [eax+44], 232			; 000000e8H
	mov	DWORD PTR [eax+45], edi
	mov	BYTE PTR [eax+49], 194			; 000000c2H
	mov	WORD PTR [eax+50], cx
	jmp	SHORT $LN1@ffi_prep_c@2
$LN6@ffi_prep_c@2:
; Line 679
	cmp	eax, 2
	jne	SHORT $LN4@ffi_prep_c@2
; Line 683
	movzx	ecx, WORD PTR [esi+16]
	mov	edx, DWORD PTR _codeloc$[esp+4]
	mov	eax, DWORD PTR _closure$[esp+4]
	mov	edi, OFFSET _ffi_closure_STDCALL
	sub	edi, edx
	sub	edi, 10					; 0000000aH
	mov	DWORD PTR [eax+1], edx
	mov	BYTE PTR [eax+5], 232			; 000000e8H
	mov	DWORD PTR [eax+6], edi
	mov	BYTE PTR [eax+10], 194			; 000000c2H
	mov	WORD PTR [eax+11], cx
	jmp	SHORT $LN12@ffi_prep_c@2
$LN4@ffi_prep_c@2:
; Line 685
	cmp	eax, 5
	jne	SHORT $LN2@ffi_prep_c@2
$LN11@ffi_prep_c@2:
; Line 689
	mov	ecx, DWORD PTR _codeloc$[esp+4]
	mov	eax, DWORD PTR _closure$[esp+4]
	mov	edx, OFFSET _ffi_closure_SYSV
	sub	edx, ecx
	sub	edx, 10					; 0000000aH
	mov	DWORD PTR [eax+6], edx
	mov	BYTE PTR [eax+5], 233			; 000000e9H
	mov	DWORD PTR [eax+1], ecx
$LN12@ffi_prep_c@2:
	mov	BYTE PTR [eax], 184			; 000000b8H
$LN1@ffi_prep_c@2:
; Line 699
	mov	ecx, DWORD PTR _user_data$[esp+4]
; Line 700
	mov	edx, DWORD PTR _fun$[esp+4]
	mov	DWORD PTR [eax+52], esi
	pop	edi
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+56], edx
; Line 702
	xor	eax, eax
	pop	esi
; Line 703
	ret	0
$LN2@ffi_prep_c@2:
	pop	edi
; Line 695
	mov	eax, 2
	pop	esi
; Line 703
	ret	0
_ffi_prep_closure_loc ENDP
_TEXT	ENDS
PUBLIC	_ffi_prep_raw_closure_loc
EXTRN	_ffi_closure_raw_THISCALL:PROC
EXTRN	_ffi_closure_raw_SYSV:PROC
; Function compile flags: /Ogtpy
;	COMDAT _ffi_prep_raw_closure_loc
_TEXT	SEGMENT
_closure$ = 8						; size = 4
_cif$ = 12						; size = 4
_fun$ = 16						; size = 4
_user_data$ = 20					; size = 4
_codeloc$ = 24						; size = 4
_ffi_prep_raw_closure_loc PROC				; COMDAT
; Line 715
	push	esi
; Line 718
	mov	esi, DWORD PTR _cif$[esp]
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, 1
	je	SHORT $LN13@ffi_prep_r
; Line 720
	cmp	ecx, 3
	je	SHORT $LN7@ffi_prep_r
; Line 722
	mov	eax, 2
	pop	esi
; Line 755
	ret	0
$LN7@ffi_prep_r:
; Line 737
	cmp	ecx, 1
$LN13@ffi_prep_r:
	mov	eax, DWORD PTR _closure$[esp]
	jne	SHORT $LN3@ffi_prep_r
; Line 741
	mov	ecx, DWORD PTR _codeloc$[esp]
	mov	edx, OFFSET _ffi_closure_raw_SYSV
	sub	edx, ecx
	sub	edx, 10					; 0000000aH
	mov	DWORD PTR [eax+1], ecx
; Line 751
	mov	ecx, DWORD PTR _user_data$[esp]
	mov	DWORD PTR [eax+6], edx
; Line 752
	mov	edx, DWORD PTR _fun$[esp]
	mov	DWORD PTR [eax+52], esi
	mov	BYTE PTR [eax], 184			; 000000b8H
	mov	BYTE PTR [eax+5], 233			; 000000e9H
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+56], edx
; Line 754
	xor	eax, eax
	pop	esi
; Line 755
	ret	0
$LN3@ffi_prep_r:
; Line 744
	cmp	ecx, 3
	jne	$LN1@ffi_prep_r
; Line 747
	movzx	ecx, WORD PTR [esi+16]
	push	edi
	movzx	edi, cx
	mov	DWORD PTR [eax+14], edi
	mov	edi, 2932				; 00000b74H
	mov	WORD PTR [eax+26], di
	mov	dl, 184					; 000000b8H
	mov	edi, 62837				; 0000f575H
	mov	WORD PTR [eax+37], di
	mov	BYTE PTR [eax+13], dl
	mov	BYTE PTR [eax+39], dl
	mov	edx, DWORD PTR _codeloc$[esp+4]
	mov	edi, OFFSET _ffi_closure_raw_THISCALL
	sub	edi, edx
	sub	edi, 49					; 00000031H
	add	ecx, 8
	mov	DWORD PTR [eax+45], edi
	mov	DWORD PTR [eax], -2094791541		; 8324048bH
	mov	DWORD PTR [eax+4], 1284050156		; 4c890cecH
	mov	DWORD PTR [eax+8], 76088356		; 04890424H
	mov	BYTE PTR [eax+12], 36			; 00000024H
	mov	DWORD PTR [eax+18], 136596621		; 08244c8dH
	mov	DWORD PTR [eax+22], 1208150209		; 4802e8c1H
	mov	DWORD PTR [eax+28], -1995943541		; 8908518bH
	mov	DWORD PTR [eax+32], 79790865		; 04c18311H
	mov	BYTE PTR [eax+36], 72			; 00000048H
	mov	DWORD PTR [eax+40], edx
	mov	BYTE PTR [eax+44], 232			; 000000e8H
	mov	BYTE PTR [eax+49], 194			; 000000c2H
	mov	WORD PTR [eax+50], cx
	pop	edi
$LN1@ffi_prep_r:
; Line 751
	mov	ecx, DWORD PTR _user_data$[esp]
; Line 752
	mov	edx, DWORD PTR _fun$[esp]
	mov	DWORD PTR [eax+52], esi
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+56], edx
; Line 754
	xor	eax, eax
	pop	esi
; Line 755
	ret	0
_ffi_prep_raw_closure_loc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ffi_prep_args_raw
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_ecif$ = 12						; size = 4
_ffi_prep_args_raw PROC					; COMDAT
; Line 760
	mov	eax, DWORD PTR _ecif$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _stack$[esp-4]
	push	edx
	push	eax
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 761
	ret	0
_ffi_prep_args_raw ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ffi_raw_call
; Function compile flags: /Ogtpy
;	COMDAT _ffi_raw_call
_TEXT	SEGMENT
_ecif$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_cif$ = 8						; size = 4
_fn$ = 12						; size = 4
_rvalue$ = 16						; size = 4
_fake_avalue$ = 20					; size = 4
_ffi_raw_call PROC					; COMDAT
; Line 770
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 782
	mov	ecx, DWORD PTR _rvalue$[ebp]
	mov	eax, DWORD PTR _fake_avalue$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _cif$[ebp]
	push	edi
	mov	DWORD PTR _ecif$[ebp], esi
	mov	DWORD PTR _ecif$[ebp+8], eax
	test	ecx, ecx
	jne	SHORT $LN18@ffi_raw_ca
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN17@ffi_raw_ca
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN18@ffi_raw_ca
$LN17@ffi_raw_ca:
; Line 784
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [ecx]
	call	__alloca_probe_16
	mov	DWORD PTR _ecif$[ebp+4], esp
; Line 786
	jmp	SHORT $LN16@ffi_raw_ca
$LN18@ffi_raw_ca:
; Line 787
	mov	DWORD PTR _ecif$[ebp+4], ecx
$LN16@ffi_raw_ca:
; Line 790
	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR [eax-1]
	cmp	ecx, 4
	ja	$LN1@ffi_raw_ca
	jmp	DWORD PTR $LN29@ffi_raw_ca[ecx*4]
$LN13@ffi_raw_ca:
; Line 797
	mov	edx, DWORD PTR _fn$[ebp]
	mov	ecx, DWORD PTR _ecif$[ebp+4]
	push	edx
	mov	edx, DWORD PTR [esi+20]
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	push	edx
	push	ecx
	push	eax
	lea	edx, DWORD PTR _ecif$[ebp]
	push	edx
; Line 798
	jmp	SHORT $LN28@ffi_raw_ca
$LN12@ffi_raw_ca:
; Line 803
	xor	edi, edi
; Line 805
	cmp	DWORD PTR [esi+20], 13			; 0000000dH
	mov	ebx, eax
	jne	SHORT $LN11@ffi_raw_ca
; Line 806
	mov	edi, 1
$LN11@ffi_raw_ca:
; Line 808
	xor	edx, edx
	cmp	DWORD PTR [esi+4], edx
	jbe	SHORT $LN8@ffi_raw_ca
$LN10@ffi_raw_ca:
	cmp	edi, 2
	jae	SHORT $LN3@ffi_raw_ca
; Line 813
	mov	eax, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [eax+edx*4]
	movzx	ecx, WORD PTR [eax+6]
	cmp	cx, 2
	je	SHORT $LN9@ffi_raw_ca
	cmp	cx, 13					; 0000000dH
	je	SHORT $LN9@ffi_raw_ca
; Line 815
	mov	eax, DWORD PTR [eax]
	add	eax, 3
	and	eax, -4					; fffffffcH
; Line 816
	je	SHORT $LN9@ffi_raw_ca
	cmp	eax, 4
	ja	SHORT $LN9@ffi_raw_ca
; Line 818
	inc	edi
$LN9@ffi_raw_ca:
; Line 808
	inc	edx
	cmp	edx, DWORD PTR [esi+4]
	jb	SHORT $LN10@ffi_raw_ca
$LN8@ffi_raw_ca:
; Line 820
	cmp	edi, 2
	jae	SHORT $LN3@ffi_raw_ca
	cmp	ebx, 4
	jne	SHORT $LN3@ffi_raw_ca
; Line 821
	mov	ebx, 3
	mov	DWORD PTR [esi], ebx
$LN3@ffi_raw_ca:
; Line 822
	cmp	edi, 1
	jae	SHORT $LN2@ffi_raw_ca
	cmp	ebx, 3
	jne	SHORT $LN2@ffi_raw_ca
; Line 823
	mov	ebx, 2
	mov	DWORD PTR [esi], ebx
$LN2@ffi_raw_ca:
; Line 825
	mov	ecx, DWORD PTR _fn$[ebp]
	mov	edx, DWORD PTR _ecif$[ebp+4]
	mov	eax, DWORD PTR [esi+20]
	push	ecx
	push	edx
	push	eax
	mov	eax, DWORD PTR [esi+16]
	push	eax
	push	ebx
	lea	ecx, DWORD PTR _ecif$[ebp]
	push	ecx
$LN28@ffi_raw_ca:
	push	OFFSET _ffi_prep_args_raw
	call	_ffi_call_win32
	add	esp, 28					; 0000001cH
$LN1@ffi_raw_ca:
; Line 838
	lea	esp, DWORD PTR [ebp-28]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@ffi_raw_ca:
	DD	$LN13@ffi_raw_ca
	DD	$LN13@ffi_raw_ca
	DD	$LN12@ffi_raw_ca
	DD	$LN12@ffi_raw_ca
	DD	$LN13@ffi_raw_ca
_ffi_raw_call ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_ffi_closure_SYSV_inner
; Function compile flags: /Ogtpy
;	COMDAT _ffi_closure_SYSV_inner
_TEXT	SEGMENT
__$ArrayPad$ = -4					; size = 4
_closure$ = 8						; size = 4
_respp$ = 12						; size = 4
_args$ = 16						; size = 4
_ffi_closure_SYSV_inner PROC				; COMDAT
; Line 482
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
; Line 487
	mov	edi, DWORD PTR _closure$[ebp]
	mov	esi, DWORD PTR [edi+52]
; Line 488
	mov	eax, DWORD PTR [esi+4]
	add	eax, eax
	add	eax, eax
	call	__alloca_probe_16
; Line 496
	mov	eax, DWORD PTR _respp$[ebp]
	mov	ebx, esp
	push	ebx
	push	eax
	mov	eax, DWORD PTR _args$[ebp]
	mov	edx, esi
	call	_ffi_prep_incoming_args_SYSV
; Line 498
	mov	ecx, DWORD PTR [edi+60]
	mov	edx, DWORD PTR _respp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR [edi+56]
	push	ebx
	push	eax
	push	esi
	call	ecx
; Line 500
	mov	eax, DWORD PTR [esi+20]
	add	esp, 24					; 00000018H
; Line 501
	lea	esp, DWORD PTR [ebp-16]
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ffi_closure_SYSV_inner ENDP
_TEXT	ENDS
END
